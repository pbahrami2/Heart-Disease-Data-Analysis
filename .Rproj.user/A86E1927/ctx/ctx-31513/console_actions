{
    "type": [
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        2,
        2,
        0,
        1,
        2,
        2,
        2,
        3,
        0,
        1,
        2,
        2,
        2,
        3,
        0,
        1,
        2,
        2,
        2,
        3,
        0,
        1,
        2,
        2,
        2,
        3,
        0,
        1,
        2,
        2,
        2,
        3,
        0,
        1,
        2,
        2,
        2,
        2,
        3,
        0,
        1,
        2,
        2,
        2,
        2,
        3,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        2,
        2,
        2,
        2,
        3,
        0,
        1,
        2,
        2,
        2,
        2,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        3,
        0,
        1,
        2,
        2,
        2,
        2,
        3,
        0,
        1,
        2,
        2,
        2,
        2,
        3,
        0,
        1,
        2,
        2,
        2,
        2,
        3,
        3,
        3,
        3,
        0,
        1,
        2,
        2,
        2,
        2,
        3,
        3,
        3,
        3,
        0,
        1,
        2,
        2,
        2,
        2,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        3,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        3,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        3,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        3,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        3,
        0,
        1,
        2,
        2,
        3,
        0,
        1,
        2,
        2,
        3,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        3,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        3,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        3,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        3,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        2,
        2,
        2,
        2,
        3,
        0,
        1,
        2,
        2,
        3,
        0,
        1,
        2,
        2,
        2,
        3,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        2,
        2,
        3,
        0,
        1,
        2,
        2,
        3,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        2,
        2,
        2,
        3,
        0,
        1,
        2,
        2,
        2,
        2,
        3,
        3,
        3,
        3,
        0,
        1,
        2,
        2,
        2,
        2,
        3,
        3,
        3,
        3,
        0,
        1,
        2,
        2,
        2,
        2,
        3,
        3,
        3,
        3,
        0,
        1,
        2,
        2,
        2,
        2,
        3,
        3,
        3,
        3,
        0,
        1,
        2,
        2,
        2,
        2,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        2,
        2,
        2,
        2,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        2,
        2,
        2,
        2,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        2,
        2,
        2,
        2,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        2,
        2,
        2,
        2,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        2,
        2,
        2,
        2,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        2,
        2,
        2,
        2,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        2,
        2,
        2,
        2,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        2,
        2,
        2,
        2,
        3,
        3,
        3,
        3,
        3,
        2
    ],
    "data": [
        "> ",
        "source(\"~/StudentDropOutRateAnalysis/data_analysis.R\", echo=TRUE)",
        "\n> # Load necessary libraries\n> library(tidyverse)\n\n> library(binom)\n\n> # Load the cleaned dataset\n> heart_data <- read.csv(\"cleaned_heart_data.csv\")\n\n> # 1. Age and Heart Disease Analysis\n> # Summary statistics of age for individuals with and without heart disease\n> age_summary <- heart_data %>% \n+  .... [TRUNCATED] \n\n> # 2. Gender Differences in Heart Disease\n> # Calculating the prevalence of heart disease by gender\n> gender_heart_disease <- heart_data %>% \n+   gro .... [TRUNCATED] \n\n> # Calculating the Wilson confidence intervals for the prevalence\n> ci <- binom.confint(x = gender_heart_disease$disease_count, n = gender_heart_dise",
        " .... [TRUNCATED] \n\n> # Adding the CI columns to the gender_heart_disease dataframe\n> gender_heart_disease$ci_lower <- ci$lower\n\n> gender_heart_disease$ci_upper <- ci$upper\n\n> # 3. Chest Pain Type and Heart Disease\n> # Distribution of chest pain types among individuals with and without heart disease\n> cp_heart_disease <- h .... [TRUNCATED] \n\u001B[38;5;232m`summarise()` has grouped output by 'cp'. You can override using the `.groups` argument.\u001B[39m\n\n> # Creating age groups for further analysis\n> heart_data$age_group <- cut(heart_data$age, breaks=c(29, 40, 50, 60, 70, 80), include.lowest=TRUE)",
        "\n\n> # Exporting the analysed data\n> write.csv(heart_data, \"modified_heart_data.csv\", row.names = FALSE) # Dataset with age groups\n\n> write.csv(age_summary, \"age_summary.csv\", row.names = FALSE)\n\n> write.csv(gender_heart_disease, \"gender_heart_disease.csv\", row.names = FALSE)\n\n> write.csv(cp_heart_disease, \"cp_heart_disease.csv\", row.names = FALSE)\n",
        "> ",
        "source(\"~/StudentDropOutRateAnalysis/data_visualisation.R\", echo=TRUE)",
        "\n> # Load necessary libraries\n> library(tidyverse)\n\n> library(ggplot2)\n\n> # Load the analyzed data\n> age_summary <- read.csv(\"age_summary.csv\")\n\n> gender_heart_disease <- read.csv(\"gender_heart_disease.csv\")\n\n> cp_heart_disease <- read.csv(\"cp_heart_disease.csv\")\n\n> modified_heart_data <- read.csv(\"modified_heart_data.csv\")\n\n> # 1. Age and Heart Disease Visualization\n> ggplot(age_summary, aes(x = factor(target), y = mean_age, fill = factor(target))) +\n+   geom_col(position .... [TRUNCATED] \n\n> # 2. Gender Differences in Heart Disease Visualization\n> ggplot(gender_heart_disease, aes(x = Gender, y = prevalence, fill = Gender)) +\n+   geom_bar",
        " .... [TRUNCATED] \n\u001B[1m\u001B[33mError\u001B[39m in `geom_bar()` at \u001B]8;line = 19:col = 0;file://C:\\Users\\psypb8\\OneDrive - The University of Nottingham\\Documents\\StudentDropOutRateAnalysis\\data_visualisation.R\u0007~/StudentDropOutRateAnalysis/data_visualisation.R:19:0\u001B]8;;\u0007:\u001B[22m\n\u001B[38;5;232m\u001B[33m!\u001B[38;5;232m Problem while computing aesthetics.\n\u001B[36mâ„¹\u001B[38;5;232m Error occurred in the 1st layer.\u001B[39m\n\u001B[1mCaused by error:\u001B[22m\n\u001B[33m!\u001B[39m object 'Gender' not found\n\u001B[90mRun `\u001B]8;;rstudio:run:rlang::last_trace()\u0007rlang::last_trace()\u001B]8;;\u0007` to see where the error occurred.\u001B[39m\n",
        "> ",
        "source(\"~/StudentDropOutRateAnalysis/data_visualisation.R\", echo=TRUE)",
        "\n> # Load necessary libraries\n> library(tidyverse)\n\n> library(ggplot2)\n\n> # Load the analyzed data\n> age_summary <- read.csv(\"age_summary.csv\")\n\n> gender_heart_disease <- read.csv(\"gender_heart_disease.csv\")\n\n> cp_heart_disease <- read.csv(\"cp_heart_disease.csv\")\n\n> modified_heart_data <- read.csv(\"modified_heart_data.csv\")\n\n> # 1. Age and Heart Disease Visualization\n> ggplot(age_summary, aes(x = factor(target), y = mean_age, fill = factor(target))) +\n+   geom_col(position .... [TRUNCATED] \n\n> # 2. Gender Differences in Heart Disease Visualization\n> gender_heart_disease$Gender <- factor(gender_heart_disease$sex, labels = c(\"Female\", \"Male\"",
        " .... [TRUNCATED] \n\n> # Enhanced ggplot code with the correct Gender column\n> ggplot(gender_heart_disease, aes(x = Gender, y = prevalence, fill = Gender)) +\n+   geom_bar( .... [TRUNCATED] \n\n> # 3. Chest Pain Type and Heart Disease Visualization\n> colnames(cp_heart_disease)[2] <- 'no_disease'\n\n> colnames(cp_heart_disease)[3] <- 'disease'\n\n> ggplot(cp_heart_disease, aes(x = as.factor(cp))) +\n+   geom_bar(aes(y = no_disease, fill = \"No Heart Disease\"), stat = \"identity\", position = positi .... [TRUNCATED] \n\n> # New visualizations for the exploratory questions\n> \n> # Visualization for Question 1: Heart Rate and Age\n> ggplot(modified_heart_data, aes(x = age",
        " .... [TRUNCATED] \n\n> # Visualization for Question 2: Cholesterol, Blood Pressure, and Heart Disease\n> ggplot(modified_heart_data, aes(x = chol, y = trestbps, color = as. .... [TRUNCATED] \n\u001B[38;5;232m`geom_smooth()` using formula = 'y ~ x'\u001B[39m\n\n> # Exporting the visualizations to files (if needed)\n> ggsave(\"age_distribution_by_heart_disease_status.png\", plot = last_plot(), device = \"png\")\n\u001B[38;5;232mSaving 7.5 x 5.57 in image\u001B[39m\n",
        "Error in f(...) : Graphics API version mismatch\n",
        "> ",
        "source(\"~/StudentDropOutRateAnalysis/data_visualisation.R\", echo=TRUE)",
        "\n> # Load necessary libraries\n> library(tidyverse)\n\n> library(ggplot2)\n\n> # Load the analyzed data\n> age_summary <- read.csv(\"age_summary.csv\")\n\n> gender_heart_disease <- read.csv(\"gender_heart_disease.csv\")\n\n> cp_heart_disease <- read.csv(\"cp_heart_disease.csv\")\n\n> modified_heart_data <- read.csv(\"modified_heart_data.csv\")\n\n> # 1. Age and Heart Disease Visualization\n> ggplot(heart_data, aes(x = age, fill = as.factor(target))) +\n+   geom_histogram(position = \"dodge\", bins  .... [TRUNCATED] \n\n> # 2. Gender Differences in Heart Disease Visualization\n> gender_heart_disease$Gender <- factor(gender_heart_disease$sex, labels = c(\"Female\", \"Male\"",
        " .... [TRUNCATED] \n\n> # Enhanced ggplot code with the correct Gender column\n> ggplot(gender_heart_disease, aes(x = Gender, y = prevalence, fill = Gender)) +\n+   geom_bar( .... [TRUNCATED] \n\n> # 3. Chest Pain Type and Heart Disease Visualization\n> colnames(cp_heart_disease)[2] <- 'no_disease'\n\n> colnames(cp_heart_disease)[3] <- 'disease'\n\n> ggplot(cp_heart_disease, aes(x = as.factor(cp))) +\n+   geom_bar(aes(y = no_disease, fill = \"No Heart Disease\"), stat = \"identity\", position = positi .... [TRUNCATED] \n\n> # New visualizations for the exploratory questions\n> \n> # Visualization for Question 1: Heart Rate and Age\n> ggplot(modified_heart_data, aes(x = age",
        " .... [TRUNCATED] \n\n> # Visualization for Question 2: Cholesterol, Blood Pressure, and Heart Disease\n> ggplot(modified_heart_data, aes(x = chol, y = trestbps, color = as. .... [TRUNCATED] \n\u001B[38;5;232m`geom_smooth()` using formula = 'y ~ x'\u001B[39m\n\n> # Exporting the visualizations to files (if needed)\n> ggsave(\"age_distribution_by_heart_disease_status.png\", plot = last_plot(), device = \"png\")\n\u001B[38;5;232mSaving 7.5 x 5.57 in image\u001B[39m\n",
        "Error in f(...) : Graphics API version mismatch\n",
        "> ",
        "source(\"~/StudentDropOutRateAnalysis/data_visualisation.R\", echo=TRUE)",
        "\n> # Load necessary libraries\n> library(tidyverse)\n\n> library(ggplot2)\n\n> # Load the analyzed data\n> age_summary <- read.csv(\"age_summary.csv\")\n\n> gender_heart_disease <- read.csv(\"gender_heart_disease.csv\")\n\n> cp_heart_disease <- read.csv(\"cp_heart_disease.csv\")\n\n> modified_heart_data <- read.csv(\"modified_heart_data.csv\")\n\n> # 1. Age and Heart Disease Visualization\n> ggplot(heart_data, aes(x = age, fill = as.factor(target))) +\n+   geom_histogram(position = \"dodge\", bins  .... [TRUNCATED] \n\n> # 2. Gender Differences in Heart Disease Visualization\n> gender_heart_disease$Gender <- factor(gender_heart_disease$sex, labels = c(\"Female\", \"Male\"",
        " .... [TRUNCATED] \n\n> # Enhanced ggplot code with the correct Gender column\n> ggplot(gender_heart_disease, aes(x = Gender, y = prevalence, fill = Gender)) +\n+   geom_bar( .... [TRUNCATED] \n\n> # 3. Chest Pain Type and Heart Disease Visualization\n> colnames(cp_heart_disease)[2] <- 'no_disease'\n\n> colnames(cp_heart_disease)[3] <- 'disease'\n\n> ggplot(cp_heart_disease, aes(x = as.factor(cp))) +\n+   geom_bar(aes(y = no_disease, fill = \"No Heart Disease\"), stat = \"identity\", position = positi .... [TRUNCATED] \n\n> # New visualizations for the exploratory questions\n> \n> # Visualization for Question 1: Heart Rate and Age\n> ggplot(modified_heart_data, aes(x = age",
        " .... [TRUNCATED] \n\n> # Visualization for Question 2: Cholesterol, Blood Pressure, and Heart Disease\n> ggplot(modified_heart_data, aes(x = chol, y = trestbps, color = as. .... [TRUNCATED] \n\u001B[38;5;232m`geom_smooth()` using formula = 'y ~ x'\u001B[39m\n\n> # Exporting the visualizations to files (if needed)\n> ggsave(\"age_distribution_by_heart_disease_status.png\", plot = last_plot(), device = \"png\")\n\u001B[38;5;232mSaving 7.5 x 5.57 in image\u001B[39m\n",
        "Error in f(...) : Graphics API version mismatch\n",
        "> ",
        "source(\"~/StudentDropOutRateAnalysis/data_visualisation.R\", echo=TRUE)",
        "\n> # Load necessary libraries\n> library(tidyverse)\n\n> library(ggplot2)\n\n> # Load the analyzed data\n> age_summary <- read.csv(\"age_summary.csv\")\n\n> gender_heart_disease <- read.csv(\"gender_heart_disease.csv\")\n\n> cp_heart_disease <- read.csv(\"cp_heart_disease.csv\")\n\n> modified_heart_data <- read.csv(\"modified_heart_data.csv\")\n\n> # 1. Age and Heart Disease Visualization\n> ggplot(heart_data, aes(x = age, fill = as.factor(target))) +\n+   geom_histogram(position = \"dodge\", bins  .... [TRUNCATED] \n\n> # 2. Gender Differences in Heart Disease Visualization\n> gender_heart_disease$Gender <- factor(gender_heart_disease$sex, labels = c(\"Female\", \"Male\"",
        " .... [TRUNCATED] \n\n> # Enhanced ggplot code with the correct Gender column\n> ggplot(gender_heart_disease, aes(x = Gender, y = prevalence, fill = Gender)) +\n+   geom_bar( .... [TRUNCATED] \n\n> # 3. Chest Pain Type and Heart Disease Visualization\n> colnames(cp_heart_disease)[2] <- 'no_disease'\n\n> colnames(cp_heart_disease)[3] <- 'disease'\n\n> ggplot(cp_heart_disease, aes(x = as.factor(cp))) +\n+   geom_bar(aes(y = no_disease, fill = \"No Heart Disease\"), stat = \"identity\", position = positi .... [TRUNCATED] \n\n> # New visualizations for the exploratory questions\n> \n> # Visualization for Question 1: Heart Rate and Age\n> ggplot(modified_heart_data, aes(x = age",
        " .... [TRUNCATED] \n\n> # Visualization for Question 2: Cholesterol, Blood Pressure, and Heart Disease\n> ggplot(modified_heart_data, aes(x = chol, y = trestbps, color = as. .... [TRUNCATED] \n\u001B[38;5;232m`geom_smooth()` using formula = 'y ~ x'\u001B[39m\n\n> # Exporting the visualizations to files (if needed)\n> ggsave(\"age_distribution_by_heart_disease_status.png\", plot = last_plot(), device = \"png\")\n\u001B[38;5;232mSaving 7.5 x 5.57 in image\u001B[39m\n",
        "Error in f(...) : Graphics API version mismatch\n",
        "> ",
        "source(\"~/StudentDropOutRateAnalysis/data_visualisation.R\", echo=TRUE)",
        "\n> # Load necessary libraries\n> library(tidyverse)\n\n> library(ggplot2)\n\n> # Load the analyzed data\n> age_summary <- read.csv(\"age_summary.csv\")\n\n> gender_heart_disease <- read.csv(\"gender_heart_disease.csv\")\n\n> cp_heart_disease <- read.csv(\"cp_heart_disease.csv\")\n\n> modified_heart_data <- read.csv(\"modified_heart_data.csv\")\n\n> # 1. Age and Heart Disease Visualization\n> ggplot(heart_data, aes(x = age, fill = as.factor(target))) +\n+   geom_histogram(position = \"dodge\", bins  .... [TRUNCATED] \n\n> # 2. Gender Differences in Heart Disease Visualization\n> gender_heart_disease$Gender <- factor(gender_heart_disease$sex, labels = c(\"Female\", \"Male\"",
        " .... [TRUNCATED] \n\n> # Enhanced ggplot code with the correct Gender column\n> ggplot(gender_heart_disease, aes(x = Gender, y = prevalence, fill = Gender)) +\n+   geom_bar( .... [TRUNCATED] \n\n> # 3. Chest Pain Type and Heart Disease Visualization\n> colnames(cp_heart_disease)[2] <- 'no_disease'\n\n> colnames(cp_heart_disease)[3] <- 'disease'\n\n> ggplot(cp_heart_disease, aes(x = as.factor(cp))) +\n+   geom_bar(aes(y = no_disease, fill = \"No Heart Disease\"), stat = \"identity\", position = positi .... [TRUNCATED] \n\n> # New visualizations for the exploratory questions\n> \n> # Visualization for Question 1: Heart Rate and Age\n> ggplot(modified_heart_data, aes(x = reo",
        " .... [TRUNCATED] \n\u001B[38;5;232m`geom_smooth()` using formula = 'y ~ x'\u001B[39m\n\n> # Visualization for Question 2: Cholesterol, Blood Pressure, and Heart Disease\n> ggplot(modified_heart_data, aes(x = chol, y = trestbps, color = as. .... [TRUNCATED] \n\u001B[38;5;232m`geom_smooth()` using formula = 'y ~ x'\u001B[39m\n\n> # Exporting the visualizations to files (if needed)\n> ggsave(\"age_distribution_by_heart_disease_status.png\", plot = last_plot(), device = \"png\")\n\u001B[38;5;232mSaving 7.5 x 5.57 in image\u001B[39m\n",
        "Error in f(...) : Graphics API version mismatch\n",
        "> ",
        "source(\"~/StudentDropOutRateAnalysis/data_analysis.R\", echo=TRUE)",
        "\n> # Load necessary libraries\n> library(tidyverse)\n\n> library(binom)\n\n> # Load the cleaned dataset\n> heart_data <- read.csv(\"cleaned_heart_data.csv\")\n\n> # Ensure that 'target' is a factor with levels 0 and 1 for the logistic regression\n> heart_data$target <- factor(heart_data$target, levels = c(0, 1) .... [TRUNCATED] \n\n> # 1. Age and Heart Disease Analysis\n> # Summary statistics of age for individuals with and without heart disease\n> age_summary <- heart_data %>% \n+  .... [TRUNCATED] \n\n> # 2. Gender Differences in Heart Disease\n> # Calculating the prevalence of heart disease by gender\n> gender_heart_disease <- heart_data %>% \n+   gro",
        " .... [TRUNCATED] \n\n> # Calculating the Wilson confidence intervals for the prevalence\n> ci <- binom.confint(x = gender_heart_disease$disease_count, n = gender_heart_dise .... [TRUNCATED] \n\n> # Adding the CI columns to the gender_heart_disease dataframe\n> gender_heart_disease$ci_lower <- ci$lower\n\n> gender_heart_disease$ci_upper <- ci$upper\n\n> # 3. Chest Pain Type and Heart Disease\n> # Distribution of chest pain types among individuals with and without heart disease\n> cp_heart_disease <- h .... [TRUNCATED] ",
        "\n\u001B[38;5;232m`summarise()` has grouped output by 'cp'. You can override using the `.groups` argument.\u001B[39m\n\n> # Creating age groups for further analysis\n> heart_data$age_group <- cut(heart_data$age, breaks=c(29, 40, 50, 60, 70, 80), include.lowest=TRUE)\n\n> # Logistic Regression Analysis for Cholesterol and Blood Pressure Interaction\n> # Fit a logistic regression model with an interaction term\n> interac .... [TRUNCATED] \n\n> # Summary of the model to check coefficients and interaction\n> model_summary <- summary(interaction_model)",
        "\n\n> # Optionally, you could export this summary to a CSV\n> write.csv(tidy(model_summary), \"interaction_model_summary.csv\", row.names = FALSE)\n",
        "Error in tidy(model_summary) : could not find function \"tidy\"\n",
        "> ",
        "source(\"~/StudentDropOutRateAnalysis/data_analysis.R\", echo=TRUE)",
        "\n> # Load necessary libraries\n> library(tidyverse)\n\n> library(binom)\n\n> # Load the cleaned dataset\n> heart_data <- read.csv(\"cleaned_heart_data.csv\")\n\n> # Ensure that 'target' is a factor with levels 0 and 1 for the logistic regression\n> heart_data$target <- factor(heart_data$target, levels = c(0, 1) .... [TRUNCATED] \n\n> # 1. Age and Heart Disease Analysis\n> # Summary statistics of age for individuals with and without heart disease\n> age_summary <- heart_data %>% \n+  .... [TRUNCATED] \n\n> # 2. Gender Differences in Heart Disease\n> # Calculating the prevalence of heart disease by gender\n> gender_heart_disease <- heart_data %>% \n+   gro",
        " .... [TRUNCATED] \n\n> # Calculating the Wilson confidence intervals for the prevalence\n> ci <- binom.confint(x = gender_heart_disease$disease_count, n = gender_heart_dise .... [TRUNCATED] \n\n> # Adding the CI columns to the gender_heart_disease dataframe\n> gender_heart_disease$ci_lower <- ci$lower\n\n> gender_heart_disease$ci_upper <- ci$upper\n\n> # 3. Chest Pain Type and Heart Disease\n> # Distribution of chest pain types among individuals with and without heart disease\n> cp_heart_disease <- h .... [TRUNCATED] ",
        "\n\u001B[38;5;232m`summarise()` has grouped output by 'cp'. You can override using the `.groups` argument.\u001B[39m\n\n> # Creating age groups for further analysis\n> heart_data$age_group <- cut(heart_data$age, breaks=c(29, 40, 50, 60, 70, 80), include.lowest=TRUE)\n\n> # Logistic Regression Analysis for Cholesterol and Blood Pressure Interaction\n> # Fit a logistic regression model with an interaction term\n> interac .... [TRUNCATED] \n\n> # Summary of the model to check coefficients and interaction\n> model_summary <- summary(interaction_model)",
        "\n\n> # Optionally, you could export this summary to a CSV\n> write.csv(tidy(model_summary), \"interaction_model_summary.csv\", row.names = FALSE)\n",
        "Error in tidy(model_summary) : could not find function \"tidy\"\n",
        "> ",
        "source(\"~/StudentDropOutRateAnalysis/data_analysis.R\", echo=TRUE)",
        "\n> # Load necessary libraries\n> library(tidyverse)\n\n> library(binom)\n\n> # Check if broom package is installed and load it\n> if (!requireNamespace(\"broom\", quietly = TRUE)) {\n+   install.packages(\"broom\")\n+ }\n\n> library(broom)\n\n> # Load the cleaned dataset\n> heart_data <- read.csv(\"cleaned_heart_data.csv\")\n\n> # Ensure that 'target' is a factor with levels 0 and 1 for the logistic regression\n> heart_data$target <- factor(heart_data$target, levels = c(0, 1) .... [TRUNCATED] \n\n> # 1. Age and Heart Disease Analysis\n> # Summary statistics of age for individuals with and without heart disease\n> age_summary <- heart_data %>% \n+ ",
        " .... [TRUNCATED] \n\n> # 2. Gender Differences in Heart Disease\n> # Calculating the prevalence of heart disease by gender\n> gender_heart_disease <- heart_data %>% \n+   gro .... [TRUNCATED] \n\n> # Calculating the Wilson confidence intervals for the prevalence\n> ci <- binom.confint(x = gender_heart_disease$disease_count, n = gender_heart_dise .... [TRUNCATED] \n\n> # Adding the CI columns to the gender_heart_disease dataframe\n> gender_heart_disease$ci_lower <- ci$lower\n\n> gender_heart_disease$ci_upper <- ci$upper",
        "\n\n> # 3. Chest Pain Type and Heart Disease\n> # Distribution of chest pain types among individuals with and without heart disease\n> cp_heart_disease <- h .... [TRUNCATED] \n\u001B[38;5;232m`summarise()` has grouped output by 'cp'. You can override using the `.groups` argument.\u001B[39m\n\n> # Creating age groups for further analysis\n> heart_data$age_group <- cut(heart_data$age, breaks=c(29, 40, 50, 60, 70, 80), include.lowest=TRUE)\n\n> # Logistic Regression Analysis for Cholesterol and Blood Pressure Interaction\n> # Fit a logistic regression model with an interaction term\n> interac",
        " .... [TRUNCATED] \n\n> # Use the tidy() function to create a neat dataframe of the model's coefficients\n> tidy_interaction_model <- tidy(interaction_model)\n\n> # Optionally, you could export this tidy dataframe to a CSV\n> write.csv(tidy_interaction_model, \"interaction_model_coefficients.csv\", row.names = FA .... [TRUNCATED] \n\n> # Exporting the analysed data\n> write.csv(heart_data, \"modified_heart_data.csv\", row.names = FALSE) # Dataset with age groups and other modification .... [TRUNCATED] \n\n> write.csv(age_summary, \"age_summary.csv\", row.names = FALSE)",
        "\n\n> write.csv(gender_heart_disease, \"gender_heart_disease.csv\", row.names = FALSE)\n\n> write.csv(cp_heart_disease, \"cp_heart_disease.csv\", row.names = FALSE)\n",
        "> ",
        "source(\"~/StudentDropOutRateAnalysis/data_visualisation.R\", echo=TRUE)",
        "\n> # Load necessary libraries\n> library(tidyverse)\n\n> library(ggplot2)\n\n> library(broom) # for tidy()\n\n> # Load the analyzed data\n> age_summary <- read.csv(\"age_summary.csv\")\n\n> gender_heart_disease <- read.csv(\"gender_heart_disease.csv\")\n\n> cp_heart_disease <- read.csv(\"cp_heart_disease.csv\")\n\n> modified_heart_data <- read.csv(\"modified_heart_data.csv\")\n\n> # Load the logistic model coefficients\n> logistic_model_coefficients <- read.csv(\"interaction_model_coefficients.csv\")\n\n> # 1. Age and Heart Disease Visualization\n> ggplot(heart_data, aes(x = age, fill = as.factor(target))) +\n+   geom_histogram(position = \"dodge\", bins ",
        " .... [TRUNCATED] \n\n> # 2. Gender Differences in Heart Disease Visualization\n> gender_heart_disease$Gender <- factor(gender_heart_disease$sex, labels = c(\"Female\", \"Male\" .... [TRUNCATED] \n\n> # Enhanced ggplot code with the correct Gender column\n> ggplot(gender_heart_disease, aes(x = Gender, y = prevalence, fill = Gender)) +\n+   geom_bar( .... [TRUNCATED] \n\n> # 3. Chest Pain Type and Heart Disease Visualization\n> colnames(cp_heart_disease)[2] <- 'no_disease'\n\n> colnames(cp_heart_disease)[3] <- 'disease'\n\n> ggplot(cp_heart_disease, aes(x = as.factor(cp))) +\n+   geom_bar(aes(y = no_disease, fill = \"No Heart Disease\"), stat = \"identity\", position = positi",
        " .... [TRUNCATED] \n\n> # New visualizations for the exploratory questions\n> \n> # Visualization for Question 1: Heart Rate and Age\n> ggplot(modified_heart_data, aes(x = reo .... [TRUNCATED] \n\u001B[38;5;232m`geom_smooth()` using formula = 'y ~ x'\u001B[39m\n\n> # Visualization for Question 2: Cholesterol, Blood Pressure, and Heart Disease\n> ggplot(modified_heart_data, aes(x = chol, y = trestbps, color = as. .... [TRUNCATED] \n\u001B[38;5;232m`geom_smooth()` using formula = 'y ~ x'\u001B[39m\n\n> ggplot(logistic_model_coefficients, aes(x = term, y = estimate, fill = term)) +\n+   geom_col() +\n+   coord_flip() +\n+   labs(title = \"Logistic Regre",
        " ...\" ... [TRUNCATED] \n\n> # Exporting the visualizations to files (if needed)\n> ggsave(\"logistic_model_coefficients.png\", plot = last_plot(), device = \"png\")\n\u001B[38;5;232mSaving 7.5 x 5.57 in image\u001B[39m\n",
        "Error in f(...) : Graphics API version mismatch\n",
        "> ",
        "source(\"~/StudentDropOutRateAnalysis/data_visualisation.R\", echo=TRUE)",
        "\n> # Load necessary libraries\n> library(tidyverse)\n\n> library(ggplot2)\n\n> library(broom) # for tidy()\n\n> # Load the analyzed data\n> age_summary <- read.csv(\"age_summary.csv\")\n\n> gender_heart_disease <- read.csv(\"gender_heart_disease.csv\")\n\n> cp_heart_disease <- read.csv(\"cp_heart_disease.csv\")\n\n> modified_heart_data <- read.csv(\"modified_heart_data.csv\")\n\n> # Load the logistic model coefficients\n> logistic_model_coefficients <- read.csv(\"interaction_model_coefficients.csv\")\n\n> # 1. Age and Heart Disease Visualization\n> ggplot(heart_data, aes(x = age, fill = as.factor(target))) +\n+   geom_histogram(position = \"dodge\", bins ",
        " .... [TRUNCATED] \n\n> # 2. Gender Differences in Heart Disease Visualization\n> gender_heart_disease$Gender <- factor(gender_heart_disease$sex, labels = c(\"Female\", \"Male\" .... [TRUNCATED] \n\n> # Enhanced ggplot code with the correct Gender column\n> ggplot(gender_heart_disease, aes(x = Gender, y = prevalence, fill = Gender)) +\n+   geom_bar( .... [TRUNCATED] \n\n> # 3. Chest Pain Type and Heart Disease Visualization\n> colnames(cp_heart_disease)[2] <- 'no_disease'\n\n> colnames(cp_heart_disease)[3] <- 'disease'\n\n> ggplot(cp_heart_disease, aes(x = as.factor(cp))) +\n+   geom_bar(aes(y = no_disease, fill = \"No Heart Disease\"), stat = \"identity\", position = positi",
        " .... [TRUNCATED] \n\n> # New visualizations for the exploratory questions\n> \n> # Visualization for Question 1: Heart Rate and Age\n> ggplot(modified_heart_data, aes(x = reo .... [TRUNCATED] \n\u001B[38;5;232m`geom_smooth()` using formula = 'y ~ x'\u001B[39m\n\n> # Visualization for Question 2: Cholesterol, Blood Pressure, and Heart Disease\n> ggplot(modified_heart_data, aes(x = chol, y = trestbps, color = as. .... [TRUNCATED] \n\u001B[38;5;232m`geom_smooth()` using formula = 'y ~ x'\u001B[39m\n\n> # Convert estimates to odds ratios for interpretability\n> logistic_model_coefficients$odds_ratio <- exp(logistic_model_coefficients$estimate)",
        "\n\n> logistic_model_coefficients$lower_ci <- exp(logistic_model_coefficients$estimate - 1.96 * logistic_model_coefficients$std.error)\n\n> logistic_model_coefficients$upper_ci <- exp(logistic_model_coefficients$estimate + 1.96 * logistic_model_coefficients$std.error)\n\n> # Visualization with confidence intervals and highlighting significance\n> ggplot(logistic_model_coefficients, aes(x = reorder(term, estimate), y = o .... [TRUNCATED] \n\u001B[1m\u001B[33mError\u001B[39m in `geom_col()` at \u001B]8;line = 82:col = 0;file://C:\\Users\\psypb8\\OneDrive - The University of Nottingham\\Documents\\StudentDropOutRateAnalysis\\data_visualisation.R\u0007~/StudentDropOutRateAnalysis/data_visualisation.R:82:0\u001B]8;;\u0007:\u001B[22m\n\u001B[38;5;232m\u001B[33m!\u001B[38;5;232m Problem while computing aesthetics.\n\u001B[36mâ„¹\u001B[38;5;232m Error occurred in the 1st layer.\u001B[39m\n\u001B[1mCaused by error:\u001B[22m\n\u001B[33m!\u001B[39m object 'significant' not found\n\u001B[90mRun `\u001B]8;;rstudio:run:rlang::last_trace()\u0007rlang::last_trace()\u001B]8;;\u0007` to see where the error occurred.\u001B[39m\n",
        "> ",
        "source(\"~/StudentDropOutRateAnalysis/data_visualisation.R\", echo=TRUE)",
        "\n> # Load necessary libraries\n> library(tidyverse)\n\n> library(ggplot2)\n\n> library(broom) # for tidy()\n\n> # Load the analyzed data\n> age_summary <- read.csv(\"age_summary.csv\")\n\n> gender_heart_disease <- read.csv(\"gender_heart_disease.csv\")\n\n> cp_heart_disease <- read.csv(\"cp_heart_disease.csv\")\n\n> modified_heart_data <- read.csv(\"modified_heart_data.csv\")\n\n> # Load the logistic model coefficients\n> logistic_model_coefficients <- read.csv(\"interaction_model_coefficients.csv\")\n\n> # 1. Age and Heart Disease Visualization\n> ggplot(heart_data, aes(x = age, fill = as.factor(target))) +\n+   geom_histogram(position = \"dodge\", bins ",
        " .... [TRUNCATED] \n\n> # 2. Gender Differences in Heart Disease Visualization\n> gender_heart_disease$Gender <- factor(gender_heart_disease$sex, labels = c(\"Female\", \"Male\" .... [TRUNCATED] \n\n> # Enhanced ggplot code with the correct Gender column\n> ggplot(gender_heart_disease, aes(x = Gender, y = prevalence, fill = Gender)) +\n+   geom_bar( .... [TRUNCATED] \n\n> # 3. Chest Pain Type and Heart Disease Visualization\n> colnames(cp_heart_disease)[2] <- 'no_disease'\n\n> colnames(cp_heart_disease)[3] <- 'disease'\n\n> ggplot(cp_heart_disease, aes(x = as.factor(cp))) +\n+   geom_bar(aes(y = no_disease, fill = \"No Heart Disease\"), stat = \"identity\", position = positi",
        " .... [TRUNCATED] \n\n> # New visualizations for the exploratory questions\n> \n> # Visualization for Question 1: Heart Rate and Age\n> ggplot(modified_heart_data, aes(x = reo .... [TRUNCATED] \n\u001B[38;5;232m`geom_smooth()` using formula = 'y ~ x'\u001B[39m\n\n> # Visualization for Question 2: Cholesterol, Blood Pressure, and Heart Disease\n> ggplot(modified_heart_data, aes(x = chol, y = trestbps, color = as. .... [TRUNCATED] \n\u001B[38;5;232m`geom_smooth()` using formula = 'y ~ x'\u001B[39m\n\n> # Convert estimates to odds ratios for interpretability\n> logistic_model_coefficients$odds_ratio <- exp(logistic_model_coefficients$estimate)",
        "\n\n> logistic_model_coefficients$lower_ci <- exp(logistic_model_coefficients$estimate - 1.96 * logistic_model_coefficients$std.error)\n\n> logistic_model_coefficients$upper_ci <- exp(logistic_model_coefficients$estimate + 1.96 * logistic_model_coefficients$std.error)\n\n> # Create 'significant' column based on p-value\n> logistic_model_coefficients$significant <- logistic_model_coefficients$p.value < 0.05\n\n> # Visualization with confidence intervals and highlighting significance\n> ggplot(logistic_model_coefficients, aes(x = reorder(term, estimate), y = o",
        " .... [TRUNCATED] \n\n> # Exporting the visualization to a file (if needed)\n> ggsave(\"logistic_model_odds_ratios.png\", plot = last_plot(), device = \"png\", width = 10, heigh .... [TRUNCATED] \n",
        "Error in f(...) : Graphics API version mismatch\n",
        "> ",
        "source(\"~/StudentDropOutRateAnalysis/data_visualisation.R\", echo=TRUE)",
        "\n> # Load necessary libraries\n> library(tidyverse)\n\n> library(ggplot2)\n\n> library(broom) # for tidy()\n\n> # Load the analyzed data\n> age_summary <- read.csv(\"age_summary.csv\")\n\n> gender_heart_disease <- read.csv(\"gender_heart_disease.csv\")\n\n> cp_heart_disease <- read.csv(\"cp_heart_disease.csv\")\n\n> modified_heart_data <- read.csv(\"modified_heart_data.csv\")\n\n> # Load the logistic model coefficients\n> logistic_model_coefficients <- read.csv(\"interaction_model_coefficients.csv\")\n\n> # 1. Age and Heart Disease Visualization\n> ggplot(heart_data, aes(x = age, fill = as.factor(target))) +\n+   geom_histogram(position = \"dodge\", bins ",
        " .... [TRUNCATED] \n\n> # 2. Gender Differences in Heart Disease Visualization\n> gender_heart_disease$Gender <- factor(gender_heart_disease$sex, labels = c(\"Female\", \"Male\" .... [TRUNCATED] \n\n> # Enhanced ggplot code with the correct Gender column\n> ggplot(gender_heart_disease, aes(x = Gender, y = prevalence, fill = Gender)) +\n+   geom_bar( .... [TRUNCATED] \n\n> # 3. Chest Pain Type and Heart Disease Visualization\n> colnames(cp_heart_disease)[2] <- 'no_disease'\n\n> colnames(cp_heart_disease)[3] <- 'disease'\n\n> ggplot(cp_heart_disease, aes(x = as.factor(cp))) +\n+   geom_bar(aes(y = no_disease, fill = \"No Heart Disease\"), stat = \"identity\", position = positi",
        " .... [TRUNCATED] \n\n> # New visualizations for the exploratory questions\n> \n> # Visualization for Question 1: Heart Rate and Age\n> ggplot(modified_heart_data, aes(x = reo .... [TRUNCATED] \n\u001B[38;5;232m`geom_smooth()` using formula = 'y ~ x'\u001B[39m\n\n> # Visualization for Question 2: Cholesterol, Blood Pressure, and Heart Disease\n> ggplot(modified_heart_data, aes(x = chol, y = trestbps, color = as. .... [TRUNCATED] \n\u001B[38;5;232m`geom_smooth()` using formula = 'y ~ x'\u001B[39m\n\n> # Adjust the data to use a log scale for odds ratios\n> logistic_model_coefficients <- logistic_model_coefficients %>%\n+   mutate(odds_ratio = exp(es",
        " .... [TRUNCATED] \n\n> # Create the plot\n> ggplot(logistic_model_coefficients, aes(x = term, y = odds_ratio)) +\n+   geom_point() +\n+   geom_errorbar(aes(ymin = lower_ci, y .... [TRUNCATED] \n\n> # Exporting the visualization to a file (if needed)\n> ggsave(\"logistic_model_odds_ratios.png\", plot = last_plot(), device = \"png\", width = 10, heigh .... [TRUNCATED] \n",
        "Error in f(...) : Graphics API version mismatch\n",
        "> ",
        "source(\"~/StudentDropOutRateAnalysis/data_visualisation.R\", echo=TRUE)",
        "\n> # Load necessary libraries\n> library(tidyverse)\n\n> library(ggplot2)\n\n> library(broom) # for tidy()\n\n> # Load the analyzed data\n> age_summary <- read.csv(\"age_summary.csv\")\n\n> gender_heart_disease <- read.csv(\"gender_heart_disease.csv\")\n\n> cp_heart_disease <- read.csv(\"cp_heart_disease.csv\")\n\n> modified_heart_data <- read.csv(\"modified_heart_data.csv\")\n\n> # Load the logistic model coefficients\n> logistic_model_coefficients <- read.csv(\"interaction_model_coefficients.csv\")\n\n> # 1. Age and Heart Disease Visualization\n> ggplot(heart_data, aes(x = age, fill = as.factor(target))) +\n+   geom_histogram(position = \"dodge\", bins ",
        " .... [TRUNCATED] \n\n> # 2. Gender Differences in Heart Disease Visualization\n> gender_heart_disease$Gender <- factor(gender_heart_disease$sex, labels = c(\"Female\", \"Male\" .... [TRUNCATED] \n\n> # Enhanced ggplot code with the correct Gender column\n> ggplot(gender_heart_disease, aes(x = Gender, y = prevalence, fill = Gender)) +\n+   geom_bar( .... [TRUNCATED] \n\n> # 3. Chest Pain Type and Heart Disease Visualization\n> colnames(cp_heart_disease)[2] <- 'no_disease'\n\n> colnames(cp_heart_disease)[3] <- 'disease'\n\n> ggplot(cp_heart_disease, aes(x = as.factor(cp))) +\n+   geom_bar(aes(y = no_disease, fill = \"No Heart Disease\"), stat = \"identity\", position = positi",
        " .... [TRUNCATED] \n\n> # New visualizations for the exploratory questions\n> \n> # Visualization for Question 1: Heart Rate and Age\n> ggplot(modified_heart_data, aes(x = reo .... [TRUNCATED] \n\u001B[38;5;232m`geom_smooth()` using formula = 'y ~ x'\u001B[39m\n\n> # Visualization for Question 2: Cholesterol, Blood Pressure, and Heart Disease\n> ggplot(modified_heart_data, aes(x = chol, y = trestbps, color = as. .... [TRUNCATED] \n\u001B[38;5;232m`geom_smooth()` using formula = 'y ~ x'\u001B[39m\n\n> # Adjust the data to use a log scale for odds ratios\n> logistic_model_coefficients <- logistic_model_coefficients %>%\n+   mutate(odds_ratio = exp(es",
        " .... [TRUNCATED] \n\n> # Create the plot\n> ggplot(logistic_model_coefficients, aes(x = term, y = odds_ratio)) +\n+   geom_point() +\n+   geom_errorbar(aes(ymin = lower_ci, y .... [TRUNCATED] \n\n> # Exporting the visualization to a file (if needed)\n> ggsave(\"logistic_model_odds_ratios.png\", plot = last_plot(), device = \"png\", width = 10, heigh .... [TRUNCATED] \n",
        "Error in f(...) : Graphics API version mismatch\n",
        "> ",
        "source(\"~/StudentDropOutRateAnalysis/data_visualisation.R\", echo=TRUE)",
        "\n> # Load necessary libraries\n> library(tidyverse)\n\n> library(ggplot2)\n\n> library(broom) # for tidy()\n\n> # Load the analyzed data\n> age_summary <- read.csv(\"age_summary.csv\")\n\n> gender_heart_disease <- read.csv(\"gender_heart_disease.csv\")\n\n> cp_heart_disease <- read.csv(\"cp_heart_disease.csv\")\n\n> modified_heart_data <- read.csv(\"modified_heart_data.csv\")\n\n> # Load the logistic model coefficients\n> logistic_model_coefficients <- read.csv(\"interaction_model_coefficients.csv\")\n\n> # 1. Age and Heart Disease Visualization\n> ggplot(heart_data, aes(x = age, fill = as.factor(target))) +\n+   geom_histogram(position = \"dodge\", bins ",
        " .... [TRUNCATED] \n\n> # 2. Gender Differences in Heart Disease Visualization\n> gender_heart_disease$Gender <- factor(gender_heart_disease$sex, labels = c(\"Female\", \"Male\" .... [TRUNCATED] \n\n> # Enhanced ggplot code with the correct Gender column\n> ggplot(gender_heart_disease, aes(x = Gender, y = prevalence, fill = Gender)) +\n+   geom_bar( .... [TRUNCATED] \n\n> # 3. Chest Pain Type and Heart Disease Visualization\n> colnames(cp_heart_disease)[2] <- 'no_disease'\n\n> colnames(cp_heart_disease)[3] <- 'disease'\n\n> ggplot(cp_heart_disease, aes(x = as.factor(cp))) +\n+   geom_bar(aes(y = no_disease, fill = \"No Heart Disease\"), stat = \"identity\", position = positi",
        " .... [TRUNCATED] \n\n> # New visualizations for the exploratory questions\n> \n> # Visualization for Question 1: Heart Rate and Age\n> ggplot(modified_heart_data, aes(x = reo .... [TRUNCATED] \n\u001B[38;5;232m`geom_smooth()` using formula = 'y ~ x'\u001B[39m\n\n> # Visualization for Question 2: Cholesterol, Blood Pressure, and Heart Disease\n> ggplot(modified_heart_data, aes(x = chol, y = trestbps, color = as. .... [TRUNCATED] \n\u001B[38;5;232m`geom_smooth()` using formula = 'y ~ x'\u001B[39m\n\n> # Adjust the data to use a log scale for odds ratios\n> logistic_model_coefficients <- logistic_model_coefficients %>%\n+   mutate(odds_ratio = exp(es",
        " .... [TRUNCATED] \n\n> # Create the plot\n> ggplot(logistic_model_coefficients, aes(x = term, y = odds_ratio)) +\n+   geom_point(size = 3) + # Increase point size\n+   geom_e .... [TRUNCATED] \n\n> # Exporting the visualization to a file (if needed)\n> ggsave(\"logistic_model_odds_ratios.png\", plot = last_plot(), device = \"png\", width = 10, heigh .... [TRUNCATED] \n",
        "Error in f(...) : Graphics API version mismatch\n",
        "In addition: ",
        "Warning message:\n",
        "\u001B[38;5;232mUsing `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\n\u001B[36mâ„¹\u001B[38;5;232m Please use `linewidth` instead.\n\u001B[90mThis warning is displayed once every 8 hours.\u001B[38;5;232m\n\u001B[90mCall `lifecycle::last_lifecycle_warnings()` to see where this warning was generated.\u001B[38;5;232m\u001B[39m \n",
        "> ",
        "source(\"~/StudentDropOutRateAnalysis/data_visualisation.R\", echo=TRUE)",
        "\n> # Load necessary libraries\n> library(tidyverse)\n\n> library(ggplot2)\n\n> library(broom) # for tidy()\n\n> # Load the analyzed data\n> age_summary <- read.csv(\"age_summary.csv\")\n\n> gender_heart_disease <- read.csv(\"gender_heart_disease.csv\")\n\n> cp_heart_disease <- read.csv(\"cp_heart_disease.csv\")\n\n> modified_heart_data <- read.csv(\"modified_heart_data.csv\")\n\n> # Load the logistic model coefficients\n> logistic_model_coefficients <- read.csv(\"interaction_model_coefficients.csv\")\n\n> # 1. Age and Heart Disease Visualization\n> ggplot(heart_data, aes(x = age, fill = as.factor(target))) +\n+   geom_histogram(position = \"dodge\", bins ",
        " .... [TRUNCATED] \n\n> # 2. Gender Differences in Heart Disease Visualization\n> gender_heart_disease$Gender <- factor(gender_heart_disease$sex, labels = c(\"Female\", \"Male\" .... [TRUNCATED] \n\n> # Enhanced ggplot code with the correct Gender column\n> ggplot(gender_heart_disease, aes(x = Gender, y = prevalence, fill = Gender)) +\n+   geom_bar( .... [TRUNCATED] \n\n> # 3. Chest Pain Type and Heart Disease Visualization\n> colnames(cp_heart_disease)[2] <- 'no_disease'\n\n> colnames(cp_heart_disease)[3] <- 'disease'\n\n> ggplot(cp_heart_disease, aes(x = as.factor(cp))) +\n+   geom_bar(aes(y = no_disease, fill = \"No Heart Disease\"), stat = \"identity\", position = positi",
        " .... [TRUNCATED] \n\n> # New visualizations for the exploratory questions\n> \n> # Visualization for Question 1: Heart Rate and Age\n> ggplot(modified_heart_data, aes(x = reo .... [TRUNCATED] \n\u001B[38;5;232m`geom_smooth()` using formula = 'y ~ x'\u001B[39m\n\n> # Visualization for Question 2: Cholesterol, Blood Pressure, and Heart Disease\n> ggplot(modified_heart_data, aes(x = chol, y = trestbps, color = as. .... [TRUNCATED] \n\u001B[38;5;232m`geom_smooth()` using formula = 'y ~ x'\u001B[39m\n\n> # Adjust the data to use a log scale for odds ratios\n> logistic_model_coefficients <- logistic_model_coefficients %>%\n+   mutate(odds_ratio = exp(es",
        " .... [TRUNCATED] \n\n> # Create the plot\n> ggplot(logistic_model_coefficients, aes(x = term, y = odds_ratio)) +\n+   geom_point(size = 4, pch = 16) +  # Use filled points a .... [TRUNCATED] \n\n> # Exporting the visualization to a file (if needed)\n> ggsave(\"logistic_model_odds_ratios.png\", plot = last_plot(), device = \"png\", width = 10, heigh .... [TRUNCATED] \n",
        "Error in f(...) : Graphics API version mismatch\n",
        "In addition: ",
        "Warning message:\n",
        "\u001B[38;5;232mThe `size` argument of `element_line()` is deprecated as of ggplot2 3.4.0.\n\u001B[36mâ„¹\u001B[38;5;232m Please use the `linewidth` argument instead.\n\u001B[90mThis warning is displayed once every 8 hours.\u001B[38;5;232m\n\u001B[90mCall `lifecycle::last_lifecycle_warnings()` to see where this warning was generated.\u001B[38;5;232m\u001B[39m \n",
        "> ",
        "source(\"~/StudentDropOutRateAnalysis/data_visualisation.R\", echo=TRUE)",
        "\n> # Load necessary libraries\n> library(tidyverse)\n\n> library(ggplot2)\n\n> library(broom) # for tidy()\n\n> # Load the analyzed data\n> age_summary <- read.csv(\"age_summary.csv\")\n\n> gender_heart_disease <- read.csv(\"gender_heart_disease.csv\")\n\n> cp_heart_disease <- read.csv(\"cp_heart_disease.csv\")\n\n> modified_heart_data <- read.csv(\"modified_heart_data.csv\")\n\n> # Load the logistic model coefficients\n> logistic_model_coefficients <- read.csv(\"interaction_model_coefficients.csv\")\n\n> # 1. Age and Heart Disease Visualization\n> ggplot(heart_data, aes(x = age, fill = as.factor(target))) +\n+   geom_histogram(position = \"dodge\", bins ",
        " .... [TRUNCATED] \n\n> # 2. Gender Differences in Heart Disease Visualization\n> gender_heart_disease$Gender <- factor(gender_heart_disease$sex, labels = c(\"Female\", \"Male\" .... [TRUNCATED] \n\n> # Enhanced ggplot code with the correct Gender column\n> ggplot(gender_heart_disease, aes(x = Gender, y = prevalence, fill = Gender)) +\n+   geom_bar( .... [TRUNCATED] \n\n> # 3. Chest Pain Type and Heart Disease Visualization\n> colnames(cp_heart_disease)[2] <- 'no_disease'\n\n> colnames(cp_heart_disease)[3] <- 'disease'\n\n> ggplot(cp_heart_disease, aes(x = as.factor(cp))) +\n+   geom_bar(aes(y = no_disease, fill = \"No Heart Disease\"), stat = \"identity\", position = positi",
        " .... [TRUNCATED] \n\n> # New visualizations for the exploratory questions\n> \n> # Visualization for Question 1: Heart Rate and Age\n> ggplot(modified_heart_data, aes(x = reo .... [TRUNCATED] \n\u001B[38;5;232m`geom_smooth()` using formula = 'y ~ x'\u001B[39m\n\n> # Visualization for Question 2: Cholesterol, Blood Pressure, and Heart Disease\n> ggplot(modified_heart_data, aes(x = chol, y = trestbps, color = as. .... [TRUNCATED] \n\u001B[38;5;232m`geom_smooth()` using formula = 'y ~ x'\u001B[39m\n\n> # Assuming logistic_model_coefficients is already loaded and contains the necessary columns\n> # Update the term names to be more descriptive\n> logis",
        " .... [TRUNCATED] \n\n> # Create the plot with updated aesthetics\n> ggplot(logistic_model_coefficients, aes(x = term, y = odds_ratio)) +\n+   geom_point(size = 4, pch = 16)  .... [TRUNCATED] \n\u001B[1m\u001B[33mError\u001B[39m in `geom_point()` at \u001B]8;line = 85:col = 0;file://C:\\Users\\psypb8\\OneDrive - The University of Nottingham\\Documents\\StudentDropOutRateAnalysis\\data_visualisation.R\u0007~/StudentDropOutRateAnalysis/data_visualisation.R:85:0\u001B]8;;\u0007:\u001B[22m\n\u001B[38;5;232m\u001B[33m!\u001B[38;5;232m Problem while computing aesthetics.\n\u001B[36mâ„¹\u001B[38;5;232m Error occurred in the 1st layer.\u001B[39m\n\u001B[1mCaused by error:\u001B[22m\n\u001B[33m!\u001B[39m object 'odds_ratio' not found\n\u001B[90mRun `\u001B]8;;rstudio:run:rlang::last_trace()\u0007rlang::last_trace()\u001B]8;;\u0007` to see where the error occurred.\u001B[39m\n",
        "> ",
        "source(\"~/StudentDropOutRateAnalysis/data_visualisation.R\", echo=TRUE)",
        "\n> # Load necessary libraries\n> library(tidyverse)\n\n> library(ggplot2)\n\n> library(broom) # for tidy()\n\n> # Load the analyzed data\n> age_summary <- read.csv(\"age_summary.csv\")\n\n> gender_heart_disease <- read.csv(\"gender_heart_disease.csv\")\n\n> cp_heart_disease <- read.csv(\"cp_heart_disease.csv\")\n\n> modified_heart_data <- read.csv(\"modified_heart_data.csv\")\n\n> # Load the logistic model coefficients\n> logistic_model_coefficients <- read.csv(\"interaction_model_coefficients.csv\")\n\n> # Calculate the odds ratios and the confidence intervals\n> logistic_model_coefficients <- logistic_model_coefficients %>%\n+   mutate(\n+     odds_rat",
        " .... [TRUNCATED] \n\n> # 1. Age and Heart Disease Visualization\n> ggplot(heart_data, aes(x = age, fill = as.factor(target))) +\n+   geom_histogram(position = \"dodge\", bins  .... [TRUNCATED] \n\n> # 2. Gender Differences in Heart Disease Visualization\n> gender_heart_disease$Gender <- factor(gender_heart_disease$sex, labels = c(\"Female\", \"Male\" .... [TRUNCATED] \n\n> # Enhanced ggplot code with the correct Gender column\n> ggplot(gender_heart_disease, aes(x = Gender, y = prevalence, fill = Gender)) +\n+   geom_bar( .... [TRUNCATED] ",
        "\n\n> # 3. Chest Pain Type and Heart Disease Visualization\n> colnames(cp_heart_disease)[2] <- 'no_disease'\n\n> colnames(cp_heart_disease)[3] <- 'disease'\n\n> ggplot(cp_heart_disease, aes(x = as.factor(cp))) +\n+   geom_bar(aes(y = no_disease, fill = \"No Heart Disease\"), stat = \"identity\", position = positi .... [TRUNCATED] \n\n> # New visualizations for the exploratory questions\n> \n> # Visualization for Question 1: Heart Rate and Age\n> ggplot(modified_heart_data, aes(x = reo .... [TRUNCATED] \n\u001B[38;5;232m`geom_smooth()` using formula = 'y ~ x'\u001B[39m\n",
        "\n> # Visualization for Question 2: Cholesterol, Blood Pressure, and Heart Disease\n> ggplot(modified_heart_data, aes(x = chol, y = trestbps, color = as. .... [TRUNCATED] \n\u001B[38;5;232m`geom_smooth()` using formula = 'y ~ x'\u001B[39m\n\n> # Assuming logistic_model_coefficients is already loaded and contains the necessary columns\n> # Update the term names to be more descriptive\n> logis .... [TRUNCATED] \n\n> # Create the plot with updated aesthetics\n> ggplot(logistic_model_coefficients, aes(x = term, y = odds_ratio)) +\n+   geom_point(size = 4, pch = 16) ",
        " .... [TRUNCATED] \n\n> # Exporting the visualization to a file (if needed)\n> ggsave(\"logistic_model_odds_ratios.png\", plot = last_plot(), device = \"png\", width = 10, heigh .... [TRUNCATED] \n",
        "Error in f(...) : Graphics API version mismatch\n",
        "> ",
        "source(\"~/StudentDropOutRateAnalysis/data_visualisation.R\", echo=TRUE)",
        "\n> # Load necessary libraries\n> library(tidyverse)\n\n> library(ggplot2)\n\n> library(broom) # for tidy()\n\n> # Load the analyzed data\n> age_summary <- read.csv(\"age_summary.csv\")\n\n> gender_heart_disease <- read.csv(\"gender_heart_disease.csv\")\n\n> cp_heart_disease <- read.csv(\"cp_heart_disease.csv\")\n\n> modified_heart_data <- read.csv(\"modified_heart_data.csv\")\n\n> # Load the logistic model coefficients\n> logistic_model_coefficients <- read.csv(\"interaction_model_coefficients.csv\")\n\n> # Data checking code starts here\n> # Check the levels of factor variables if 'term' is a factor\n> if(is.factor(logistic_model_coefficients$term)) {\n",
        " .... [TRUNCATED] \n\n> # Summarize the data to see if there are any NA values\n> summary(logistic_model_coefficients)\n     term              estimate            std.error          statistic            p.value      \n Length:4           Min.   :-0.0085493   Min.   :0.000139   Min.   :-0.239628   Min.   :0.6785  \n Class :character   1st Qu.:-0.0021602   1st Qu.:0.013784   1st Qu.:-0.223907   1st Qu.:0.7776  \n Mode  :character   Median : 0.0007032   Median :0.027005   Median :-0.070142   Median :0.8188  \n                   ",
        " Mean   : 0.4824728   Mean   :1.181943   Mean   : 0.008637   Mean   :0.8134  \n                    3rd Qu.: 0.4853363   3rd Qu.:1.195164   3rd Qu.: 0.162402   3rd Qu.:0.8546  \n                    Max.   : 1.9370342   Max.   :4.673623   Max.   : 0.414461   Max.   :0.9375  \n\n> # Directly check for NA values in the 'term' column and other relevant columns\n> sum(is.na(logistic_model_coefficients$term))\n[1] 0\n\n> sum(is.na(logistic_model_coefficients$odds_ratio))\n[1] 0\n\n> # Repeat for other relevant columns\n> \n> # Inspect rows with NA values\n> logistic_model_coefficients[is.na(logistic_model_coefficients$term), ]",
        "\n[1] term      estimate  std.error statistic p.value  \n<0 rows> (or 0-length row.names)\n\n> # If NA values are a mistake, remove them\n> logistic_model_coefficients <- logistic_model_coefficients[!is.na(logistic_model_coefficients$term), ]\n\n> # Calculate the odds ratios and the confidence intervals\n> logistic_model_coefficients <- logistic_model_coefficients %>%\n+   mutate(\n+     odds_rat .... [TRUNCATED] \n\n> # 1. Age and Heart Disease Visualization\n> ggplot(heart_data, aes(x = age, fill = as.factor(target))) +\n+   geom_histogram(position = \"dodge\", bins ",
        " .... [TRUNCATED] \n\n> # 2. Gender Differences in Heart Disease Visualization\n> gender_heart_disease$Gender <- factor(gender_heart_disease$sex, labels = c(\"Female\", \"Male\" .... [TRUNCATED] \n\n> # Enhanced ggplot code with the correct Gender column\n> ggplot(gender_heart_disease, aes(x = Gender, y = prevalence, fill = Gender)) +\n+   geom_bar( .... [TRUNCATED] \n\n> # 3. Chest Pain Type and Heart Disease Visualization\n> colnames(cp_heart_disease)[2] <- 'no_disease'\n\n> colnames(cp_heart_disease)[3] <- 'disease'\n\n> ggplot(cp_heart_disease, aes(x = as.factor(cp))) +\n+   geom_bar(aes(y = no_disease, fill = \"No Heart Disease\"), stat = \"identity\", position = positi",
        " .... [TRUNCATED] \n\n> # New visualizations for the exploratory questions\n> \n> # Visualization for Question 4: Heart Rate and Age\n> ggplot(modified_heart_data, aes(x = reo .... [TRUNCATED] \n\u001B[38;5;232m`geom_smooth()` using formula = 'y ~ x'\u001B[39m\n\n> # Visualization for Question 5: Cholesterol, Blood Pressure, and Heart Disease\n> ggplot(modified_heart_data, aes(x = chol, y = trestbps, color = as. .... [TRUNCATED] \n\u001B[38;5;232m`geom_smooth()` using formula = 'y ~ x'\u001B[39m\n\n> # Assuming logistic_model_coefficients is already loaded and contains the necessary columns\n> # Update the term names to be more descriptive\n> logis",
        " .... [TRUNCATED] \n\n> # Create the plot with updated aesthetics\n> ggplot(logistic_model_coefficients, aes(x = term, y = odds_ratio)) +\n+   geom_point(size = 4, pch = 16)  .... [TRUNCATED] \n\n> # Exporting the visualization to a file (if needed)\n> ggsave(\"logistic_model_odds_ratios.png\", plot = last_plot(), device = \"png\", width = 10, heigh .... [TRUNCATED] \n",
        "Error in f(...) : Graphics API version mismatch\n",
        "> ",
        "source(\"~/StudentDropOutRateAnalysis/data_visualisation.R\", echo=TRUE)",
        "\n> # Load necessary libraries\n> library(tidyverse)\n\n> library(ggplot2)\n\n> library(broom) # for tidy()\n\n> # Load the analyzed data\n> age_summary <- read.csv(\"age_summary.csv\")\n\n> gender_heart_disease <- read.csv(\"gender_heart_disease.csv\")\n\n> cp_heart_disease <- read.csv(\"cp_heart_disease.csv\")\n\n> modified_heart_data <- read.csv(\"modified_heart_data.csv\")\n\n> # Load the logistic model coefficients\n> logistic_model_coefficients <- read.csv(\"interaction_model_coefficients.csv\")\n\n> # Calculate the odds ratios and the confidence intervals\n> logistic_model_coefficients <- logistic_model_coefficients %>%\n+   mutate(\n+     odds_rat",
        " .... [TRUNCATED] \n\n> # Data checking code starts here\n> # Check the levels of factor variables if 'term' is a factor\n> if(is.factor(logistic_model_coefficients$term)) {\n .... [TRUNCATED] \n\n> # Summarize the data to see if there are any NA values\n> summary(logistic_model_coefficients)\n     term              estimate            std.error          statistic            p.value      \n Length:4           Min.   :-0.0085493   Min.   :0.000139   Min.   :-0.239628   Min.   :0.6785  \n Class :character   1st Qu.:-0.0021602  ",
        " 1st Qu.:0.013784   1st Qu.:-0.223907   1st Qu.:0.7776  \n Mode  :character   Median : 0.0007032   Median :0.027005   Median :-0.070142   Median :0.8188  \n                    Mean   : 0.4824728   Mean   :1.181943   Mean   : 0.008637   Mean   :0.8134  \n                    3rd Qu.: 0.4853363   3rd Qu.:1.195164   3rd Qu.: 0.162402   3rd Qu.:0.8546  \n                    Max.   : 1.9370342   Max.   :4.673623   Max.   : 0.414461   Max.   :0.9375  \n   odds_ratio        lower_ci            upper_ci       \n Min.   :0.9915  ",
        " Min.   :0.0007294   Min.   :    1.00  \n 1st Qu.:0.9978   1st Qu.:0.6935747   1st Qu.:    1.03  \n Median :1.0007   Median :0.9453083   Median :    1.05  \n Mean   :2.4828   Mean   :0.7227606   Mean   :16499.53  \n 3rd Qu.:2.4856   3rd Qu.:0.9744942   3rd Qu.:16499.56  \n Max.   :6.9381   Max.   :0.9996966   Max.   :65995.03  \n\n> # Directly check for NA values in the 'term' column and other relevant columns\n> sum(is.na(logistic_model_coefficients$term))\n[1] 0\n\n> sum(is.na(logistic_model_coefficients$odds_ratio))",
        "\n[1] 0\n\n> # Repeat for other relevant columns\n> \n> # Inspect rows with NA values\n> logistic_model_coefficients[is.na(logistic_model_coefficients$term), ]\n[1] term       estimate   std.error  statistic  p.value    odds_ratio lower_ci   upper_ci  \n<0 rows> (or 0-length row.names)\n\n> # If NA values are a mistake, remove them\n> logistic_model_coefficients <- logistic_model_coefficients[!is.na(logistic_model_coefficients$term), ]\n\n> # 1. Age and Heart Disease Visualization\n> ggplot(heart_data, aes(x = age, fill = as.factor(target))) +\n+   geom_histogram(position = \"dodge\", bins ",
        " .... [TRUNCATED] \n\n> # 2. Gender Differences in Heart Disease Visualization\n> gender_heart_disease$Gender <- factor(gender_heart_disease$sex, labels = c(\"Female\", \"Male\" .... [TRUNCATED] \n\n> # Enhanced ggplot code with the correct Gender column\n> ggplot(gender_heart_disease, aes(x = Gender, y = prevalence, fill = Gender)) +\n+   geom_bar( .... [TRUNCATED] \n\n> # 3. Chest Pain Type and Heart Disease Visualization\n> colnames(cp_heart_disease)[2] <- 'no_disease'\n\n> colnames(cp_heart_disease)[3] <- 'disease'\n\n> ggplot(cp_heart_disease, aes(x = as.factor(cp))) +\n+   geom_bar(aes(y = no_disease, fill = \"No Heart Disease\"), stat = \"identity\", position = positi",
        " .... [TRUNCATED] \n\n> # New visualizations for the exploratory questions\n> \n> # Visualization for Question 4: Heart Rate and Age\n> ggplot(modified_heart_data, aes(x = reo .... [TRUNCATED] \n\u001B[38;5;232m`geom_smooth()` using formula = 'y ~ x'\u001B[39m\n\n> # Visualization for Question 5: Cholesterol, Blood Pressure, and Heart Disease\n> ggplot(modified_heart_data, aes(x = chol, y = trestbps, color = as. .... [TRUNCATED] \n\u001B[38;5;232m`geom_smooth()` using formula = 'y ~ x'\u001B[39m\n\n> # Assuming logistic_model_coefficients is already loaded and contains the necessary columns\n> # Update the term names to be more descriptive\n> logis",
        " .... [TRUNCATED] \n\n> # Create the plot with updated aesthetics\n> ggplot(logistic_model_coefficients, aes(x = term, y = odds_ratio)) +\n+   geom_point(size = 4, pch = 16)  .... [TRUNCATED] \n\n> # Exporting the visualization to a file (if needed)\n> ggsave(\"logistic_model_odds_ratios.png\", plot = last_plot(), device = \"png\", width = 10, heigh .... [TRUNCATED] \n",
        "Error in f(...) : Graphics API version mismatch\n",
        "> ",
        "source(\"~/StudentDropOutRateAnalysis/data_visualisation.R\", echo=TRUE)",
        "\n> # Load necessary libraries\n> library(tidyverse)\n\n> library(ggplot2)\n\n> library(broom) # for tidy()\n\n> # Load the analyzed data\n> age_summary <- read.csv(\"age_summary.csv\")\n\n> gender_heart_disease <- read.csv(\"gender_heart_disease.csv\")\n\n> cp_heart_disease <- read.csv(\"cp_heart_disease.csv\")\n\n> modified_heart_data <- read.csv(\"modified_heart_data.csv\")\n\n> # Load the logistic model coefficients\n> logistic_model_coefficients <- read.csv(\"interaction_model_coefficients.csv\")\n\n> # Calculate the odds ratios and their confidence intervals\n> logistic_model_coefficients <- logistic_model_coefficients %>%\n+   mutate(\n+     odds_r",
        " .... [TRUNCATED] \n\n> # Data checking code starts here\n> # Check the levels of factor variables if 'term' is a factor\n> if(is.factor(logistic_model_coefficients$term)) {\n .... [TRUNCATED] \n\n> # Summarize the data to see if there are any NA values\n> summary(logistic_model_coefficients)\n     term              estimate            std.error          statistic            p.value      \n Length:4           Min.   :-0.0085493   Min.   :0.000139   Min.   :-0.239628   Min.   :0.6785  \n Class :character   1st Qu.:-0.0021602  ",
        " 1st Qu.:0.013784   1st Qu.:-0.223907   1st Qu.:0.7776  \n Mode  :character   Median : 0.0007032   Median :0.027005   Median :-0.070142   Median :0.8188  \n                    Mean   : 0.4824728   Mean   :1.181943   Mean   : 0.008637   Mean   :0.8134  \n                    3rd Qu.: 0.4853363   3rd Qu.:1.195164   3rd Qu.: 0.162402   3rd Qu.:0.8546  \n                    Max.   : 1.9370342   Max.   :4.673623   Max.   : 0.414461   Max.   :0.9375  \n   odds_ratio        lower_ci            upper_ci       \n Min.   :0.9915  ",
        " Min.   :0.0007294   Min.   :    1.00  \n 1st Qu.:0.9978   1st Qu.:0.6935747   1st Qu.:    1.03  \n Median :1.0007   Median :0.9453083   Median :    1.05  \n Mean   :2.4828   Mean   :0.7227606   Mean   :16499.53  \n 3rd Qu.:2.4856   3rd Qu.:0.9744942   3rd Qu.:16499.56  \n Max.   :6.9381   Max.   :0.9996966   Max.   :65995.03  \n\n> # Directly check for NA values in the 'term' column and other relevant columns\n> sum(is.na(logistic_model_coefficients$term))\n[1] 0\n\n> sum(is.na(logistic_model_coefficients$odds_ratio))",
        "\n[1] 0\n\n> # Repeat for other relevant columns\n> \n> # Inspect rows with NA values\n> logistic_model_coefficients[is.na(logistic_model_coefficients$term), ]\n[1] term       estimate   std.error  statistic  p.value    odds_ratio lower_ci   upper_ci  \n<0 rows> (or 0-length row.names)\n\n> # If NA values are a mistake, remove them\n> logistic_model_coefficients <- logistic_model_coefficients[!is.na(logistic_model_coefficients$term), ]\n\n> # 1. Age and Heart Disease Visualization\n> ggplot(heart_data, aes(x = age, fill = as.factor(target))) +\n+   geom_histogram(position = \"dodge\", bins ",
        " .... [TRUNCATED] \n\n> # 2. Gender Differences in Heart Disease Visualization\n> gender_heart_disease$Gender <- factor(gender_heart_disease$sex, labels = c(\"Female\", \"Male\" .... [TRUNCATED] \n\n> # Enhanced ggplot code with the correct Gender column\n> ggplot(gender_heart_disease, aes(x = Gender, y = prevalence, fill = Gender)) +\n+   geom_bar( .... [TRUNCATED] \n\n> # 3. Chest Pain Type and Heart Disease Visualization\n> colnames(cp_heart_disease)[2] <- 'no_disease'\n\n> colnames(cp_heart_disease)[3] <- 'disease'\n\n> ggplot(cp_heart_disease, aes(x = as.factor(cp))) +\n+   geom_bar(aes(y = no_disease, fill = \"No Heart Disease\"), stat = \"identity\", position = positi",
        " .... [TRUNCATED] \n\n> # New visualizations for the exploratory questions\n> \n> # Visualization for Question 4: Heart Rate and Age\n> ggplot(modified_heart_data, aes(x = reo .... [TRUNCATED] \n\u001B[38;5;232m`geom_smooth()` using formula = 'y ~ x'\u001B[39m\n\n> # Visualization for Question 5: Cholesterol, Blood Pressure, and Heart Disease\n> ggplot(modified_heart_data, aes(x = chol, y = trestbps, color = as. .... [TRUNCATED] \n\u001B[38;5;232m`geom_smooth()` using formula = 'y ~ x'\u001B[39m\n\n> # Assuming logistic_model_coefficients is already loaded and contains the necessary columns\n> # Update the term names to be more descriptive\n> logis",
        " .... [TRUNCATED] \n\n> # Create the plot with updated aesthetics\n> ggplot(logistic_model_coefficients, aes(x = term, y = odds_ratio)) +\n+   geom_point(size = 4, pch = 16)  .... [TRUNCATED] \n\n> # Exporting the visualization to a file (if needed)\n> ggsave(\"logistic_model_odds_ratios.png\", plot = last_plot(), device = \"png\", width = 10, heigh .... [TRUNCATED] \n",
        "Error in f(...) : Graphics API version mismatch\n",
        "> ",
        "source(\"~/StudentDropOutRateAnalysis/data_visualisation.R\", echo=TRUE)",
        "\n> # Load necessary libraries\n> library(tidyverse)\n\n> library(ggplot2)\n\n> library(broom) # for tidy()\n\n> # Load the analyzed data\n> age_summary <- read.csv(\"age_summary.csv\")\n\n> gender_heart_disease <- read.csv(\"gender_heart_disease.csv\")\n\n> cp_heart_disease <- read.csv(\"cp_heart_disease.csv\")\n\n> modified_heart_data <- read.csv(\"modified_heart_data.csv\")\n\n> # Load the logistic model coefficients\n> logistic_model_coefficients <- read.csv(\"interaction_model_coefficients.csv\")\n\n> # Check for 'NA' values and factor levels in the 'term' column\n> if(any(is.na(logistic_model_coefficients$term))) {\n+   logistic_model_coefficients ",
        " .... [TRUNCATED] \n\n> if(\"NA\" %in% levels(factor(logistic_model_coefficients$term))) {\n+   logistic_model_coefficients$term <- droplevels(logistic_model_coefficients$term .... [TRUNCATED] \n\n> # Calculate the odds ratios and the confidence intervals\n> logistic_model_coefficients <- logistic_model_coefficients %>%\n+   mutate(\n+     odds_rat .... [TRUNCATED] \n\n> # 1. Age and Heart Disease Visualization\n> ggplot(heart_data, aes(x = age, fill = as.factor(target))) +\n+   geom_histogram(position = \"dodge\", bins  .... [TRUNCATED] ",
        "\n\n> # 2. Gender Differences in Heart Disease Visualization\n> gender_heart_disease$Gender <- factor(gender_heart_disease$sex, labels = c(\"Female\", \"Male\" .... [TRUNCATED] \n\n> # Enhanced ggplot code with the correct Gender column\n> ggplot(gender_heart_disease, aes(x = Gender, y = prevalence, fill = Gender)) +\n+   geom_bar( .... [TRUNCATED] \n\n> # 3. Chest Pain Type and Heart Disease Visualization\n> colnames(cp_heart_disease)[2] <- 'no_disease'\n\n> colnames(cp_heart_disease)[3] <- 'disease'\n\n> ggplot(cp_heart_disease, aes(x = as.factor(cp))) +\n+   geom_bar(aes(y = no_disease, fill = \"No Heart Disease\"), stat = \"identity\", position = positi",
        " .... [TRUNCATED] \n\n> # New visualizations for the exploratory questions\n> \n> # Visualization for Question 4: Heart Rate and Age\n> ggplot(modified_heart_data, aes(x = reo .... [TRUNCATED] \n\u001B[38;5;232m`geom_smooth()` using formula = 'y ~ x'\u001B[39m\n\n> # Visualization for Question 5: Cholesterol, Blood Pressure, and Heart Disease\n> ggplot(modified_heart_data, aes(x = chol, y = trestbps, color = as. .... [TRUNCATED] \n\u001B[38;5;232m`geom_smooth()` using formula = 'y ~ x'\u001B[39m\n\n> # Assuming logistic_model_coefficients is already loaded and contains the necessary columns\n> # Update the term names to be more descriptive\n> logis",
        " .... [TRUNCATED] \n\n> # Create the plot with updated aesthetics\n> ggplot(logistic_model_coefficients, aes(x = term, y = odds_ratio)) +\n+   geom_point(size = 4, pch = 16)  .... [TRUNCATED] \n\n> # Exporting the visualization to a file (if needed)\n> ggsave(\"logistic_model_odds_ratios.png\", plot = last_plot(), device = \"png\", width = 10, heigh .... [TRUNCATED] \n",
        "Error in f(...) : Graphics API version mismatch\n",
        "> ",
        "source(\"~/StudentDropOutRateAnalysis/data_visualisation.R\", echo=TRUE)",
        "\n> # Load necessary libraries\n> library(tidyverse)\n\n> library(ggplot2)\n\n> library(broom) # for tidy()\n\n> # Load the analyzed data\n> age_summary <- read.csv(\"age_summary.csv\")\n\n> gender_heart_disease <- read.csv(\"gender_heart_disease.csv\")\n\n> cp_heart_disease <- read.csv(\"cp_heart_disease.csv\")\n\n> modified_heart_data <- read.csv(\"modified_heart_data.csv\")\n\n> # Load the logistic model coefficients\n> logistic_model_coefficients <- read.csv(\"interaction_model_coefficients.csv\")\n\n> # Check for 'NA' values and drop them if they are present\n> logistic_model_coefficients <- na.omit(logistic_model_coefficients)",
        "\n\n> # Inspect the Model Summary to ensure everything is labeled correctly\n> # Replace 'your_logistic_model' with the actual logistic model object\n> summ .... [TRUNCATED] \n",
        "Error in eval(ei, envir) : object 'your_logistic_model' not found\n",
        "> ",
        "source(\"~/StudentDropOutRateAnalysis/data_visualisation.R\", echo=TRUE)",
        "\n> # Load necessary libraries\n> library(tidyverse)\n\n> library(ggplot2)\n\n> library(broom) # for tidy()\n\n> # Load the analyzed data\n> age_summary <- read.csv(\"age_summary.csv\")\n\n> gender_heart_disease <- read.csv(\"gender_heart_disease.csv\")\n\n> cp_heart_disease <- read.csv(\"cp_heart_disease.csv\")\n\n> modified_heart_data <- read.csv(\"modified_heart_data.csv\")\n\n> # Load the logistic model coefficients\n> logistic_model_coefficients <- read.csv(\"interaction_model_coefficients.csv\")\n\n> # Check for 'NA' values and drop them if they are present\n> logistic_model_coefficients <- na.omit(logistic_model_coefficients)",
        "\n\n> # Inspect the Model Summary to ensure everything is labeled correctly\n> # Replace 'your_logistic_model' with the actual logistic model object\n> summ .... [TRUNCATED] \n",
        "Error in eval(ei, envir) : object 'interaction_modell' not found\n",
        "> ",
        "source(\"~/StudentDropOutRateAnalysis/data_visualisation.R\", echo=TRUE)",
        "\n> # Load necessary libraries\n> library(tidyverse)\n\n> library(ggplot2)\n\n> library(broom) # for tidy()\n\n> # Load the analyzed data\n> age_summary <- read.csv(\"age_summary.csv\")\n\n> gender_heart_disease <- read.csv(\"gender_heart_disease.csv\")\n\n> cp_heart_disease <- read.csv(\"cp_heart_disease.csv\")\n\n> modified_heart_data <- read.csv(\"modified_heart_data.csv\")\n\n> # Load the logistic model coefficients\n> logistic_model_coefficients <- read.csv(\"interaction_model_coefficients.csv\")\n\n> # Check for 'NA' values and drop them if they are present\n> logistic_model_coefficients <- na.omit(logistic_model_coefficients)",
        "\n\n> # Inspect the Model Summary to ensure everything is labeled correctly\n> # Replace 'your_logistic_model' with the actual logistic model object\n> summ .... [TRUNCATED] \n\nCall:\nglm(formula = target ~ chol * trestbps, family = binomial, data = heart_data)\n\nCoefficients:\n                Estimate Std. Error z value Pr(>|z|)\n(Intercept)    1.937e+00  4.674e+00   0.414    0.679\nchol           1.437e-03  1.833e-02   0.078    0.938\ntrestbps      -8.549e-03  3.568e-02  -0.240    0.811\nchol:trestbps -3.045e-05  1.393e-04",
        "  -0.219    0.827\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 416.42  on 301  degrees of freedom\nResidual deviance: 408.61  on 298  degrees of freedom\nAIC: 416.61\n\nNumber of Fisher Scoring iterations: 4\n\n\n> # If everything is correct, move on to calculate the odds ratios and confidence intervals\n> logistic_model_coefficients <- logistic_model_coefficien .... [TRUNCATED] \n\n> # 1. Age and Heart Disease Visualization\n> ggplot(heart_data, aes(x = age, fill = as.factor(target))) +\n+   geom_histogram(position = \"dodge\", bins ",
        " .... [TRUNCATED] \n\n> # 2. Gender Differences in Heart Disease Visualization\n> gender_heart_disease$Gender <- factor(gender_heart_disease$sex, labels = c(\"Female\", \"Male\" .... [TRUNCATED] \n\n> # Enhanced ggplot code with the correct Gender column\n> ggplot(gender_heart_disease, aes(x = Gender, y = prevalence, fill = Gender)) +\n+   geom_bar( .... [TRUNCATED] \n\n> # 3. Chest Pain Type and Heart Disease Visualization\n> colnames(cp_heart_disease)[2] <- 'no_disease'\n\n> colnames(cp_heart_disease)[3] <- 'disease'\n\n> ggplot(cp_heart_disease, aes(x = as.factor(cp))) +\n+   geom_bar(aes(y = no_disease, fill = \"No Heart Disease\"), stat = \"identity\", position = positi",
        " .... [TRUNCATED] \n\n> # New visualizations for the exploratory questions\n> \n> # Visualization for Question 4: Heart Rate and Age\n> ggplot(modified_heart_data, aes(x = reo .... [TRUNCATED] \n\u001B[38;5;232m`geom_smooth()` using formula = 'y ~ x'\u001B[39m\n\n> # Visualization for Question 5: Cholesterol, Blood Pressure, and Heart Disease\n> ggplot(modified_heart_data, aes(x = chol, y = trestbps, color = as. .... [TRUNCATED] \n\u001B[38;5;232m`geom_smooth()` using formula = 'y ~ x'\u001B[39m\n\n> # Assuming logistic_model_coefficients is already loaded and contains the necessary columns\n> # Update the term names to be more descriptive\n> logis",
        " .... [TRUNCATED] \n\n> # Create the plot with updated aesthetics\n> ggplot(logistic_model_coefficients, aes(x = term, y = odds_ratio)) +\n+   geom_point(size = 4, pch = 16)  .... [TRUNCATED] \n\n> # Exporting the visualization to a file (if needed)\n> ggsave(\"logistic_model_odds_ratios.png\", plot = last_plot(), device = \"png\", width = 10, heigh .... [TRUNCATED] \n",
        "Error in f(...) : Graphics API version mismatch\n",
        "> ",
        "source(\"~/StudentDropOutRateAnalysis/data_visualisation.R\", echo=TRUE)",
        "\n> # Load necessary libraries\n> library(tidyverse)\n\n> library(ggplot2)\n\n> library(broom) # for tidy()\n\n> # Load the analyzed data\n> age_summary <- read.csv(\"age_summary.csv\")\n\n> gender_heart_disease <- read.csv(\"gender_heart_disease.csv\")\n\n> cp_heart_disease <- read.csv(\"cp_heart_disease.csv\")\n\n> modified_heart_data <- read.csv(\"modified_heart_data.csv\")\n\n> # Load the logistic model coefficients\n> logistic_model_coefficients <- read.csv(\"interaction_model_coefficients.csv\")\n\n> # Check for 'NA' values and drop them if they are present\n> logistic_model_coefficients <- na.omit(logistic_model_coefficients)",
        "\n\n> # Inspect the Model Summary to ensure everything is labeled correctly\n> # Replace 'your_logistic_model' with the actual logistic model object\n> summ .... [TRUNCATED] \n\nCall:\nglm(formula = target ~ chol * trestbps, family = binomial, data = heart_data)\n\nCoefficients:\n                Estimate Std. Error z value Pr(>|z|)\n(Intercept)    1.937e+00  4.674e+00   0.414    0.679\nchol           1.437e-03  1.833e-02   0.078    0.938\ntrestbps      -8.549e-03  3.568e-02  -0.240    0.811\nchol:trestbps -3.045e-05  1.393e-04",
        "  -0.219    0.827\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 416.42  on 301  degrees of freedom\nResidual deviance: 408.61  on 298  degrees of freedom\nAIC: 416.61\n\nNumber of Fisher Scoring iterations: 4\n\n\n> # If everything is correct, move on to calculate the odds ratios and confidence intervals\n> logistic_model_coefficients <- logistic_model_coefficien .... [TRUNCATED] \n\n> # 1. Age and Heart Disease Visualization\n> ggplot(heart_data, aes(x = age, fill = as.factor(target))) +\n+   geom_histogram(position = \"dodge\", bins ",
        " .... [TRUNCATED] \n\n> # 2. Gender Differences in Heart Disease Visualization\n> gender_heart_disease$Gender <- factor(gender_heart_disease$sex, labels = c(\"Female\", \"Male\" .... [TRUNCATED] \n\n> # Enhanced ggplot code with the correct Gender column\n> ggplot(gender_heart_disease, aes(x = Gender, y = prevalence, fill = Gender)) +\n+   geom_bar( .... [TRUNCATED] \n\n> # 3. Chest Pain Type and Heart Disease Visualization\n> colnames(cp_heart_disease)[2] <- 'no_disease'\n\n> colnames(cp_heart_disease)[3] <- 'disease'\n\n> ggplot(cp_heart_disease, aes(x = as.factor(cp))) +\n+   geom_bar(aes(y = no_disease, fill = \"No Heart Disease\"), stat = \"identity\", position = positi",
        " .... [TRUNCATED] \n\n> # New visualizations for the exploratory questions\n> \n> # Visualization for Question 4: Heart Rate and Age\n> ggplot(modified_heart_data, aes(x = reo .... [TRUNCATED] \n\u001B[38;5;232m`geom_smooth()` using formula = 'y ~ x'\u001B[39m\n\n> # Visualization for Question 5: Cholesterol, Blood Pressure, and Heart Disease\n> ggplot(modified_heart_data, aes(x = chol, y = trestbps, color = as. .... [TRUNCATED] \n\u001B[38;5;232m`geom_smooth()` using formula = 'y ~ x'\u001B[39m\n\n> # Assuming logistic_model_coefficients is already loaded and contains the necessary columns\n> # Update the term names to be more descriptive\n> logis",
        " .... [TRUNCATED] \n\n> # Create the plot with updated aesthetics\n> ggplot(logistic_model_coefficients, aes(x = term, y = odds_ratio)) +\n+   geom_point(size = 4, pch = 16)  .... [TRUNCATED] \n\n> # Exporting the visualization to a file (if needed)\n> ggsave(\"logistic_model_odds_ratios.png\", plot = last_plot(), device = \"png\", width = 10, heigh .... [TRUNCATED] \n",
        "Error in f(...) : Graphics API version mismatch\n",
        "> ",
        "source(\"~/StudentDropOutRateAnalysis/data_visualisation.R\", echo=TRUE)",
        "\n> # Load necessary libraries\n> library(tidyverse)\n\n> library(ggplot2)\n\n> library(broom) # for tidy()\n\n> # Load the analyzed data\n> age_summary <- read.csv(\"age_summary.csv\")\n\n> gender_heart_disease <- read.csv(\"gender_heart_disease.csv\")\n\n> cp_heart_disease <- read.csv(\"cp_heart_disease.csv\")\n\n> modified_heart_data <- read.csv(\"modified_heart_data.csv\")\n\n> # Load the logistic model coefficients\n> logistic_model_coefficients <- read.csv(\"interaction_model_coefficients.csv\")\n\n> # Check for 'NA' values and drop them if they are present\n> logistic_model_coefficients <- na.omit(logistic_model_coefficients)",
        "\n\n> # Inspect the Model Summary to ensure everything is labeled correctly\n> # Replace 'your_logistic_model' with the actual logistic model object\n> summ .... [TRUNCATED] \n\nCall:\nglm(formula = target ~ chol * trestbps, family = binomial, data = heart_data)\n\nCoefficients:\n                Estimate Std. Error z value Pr(>|z|)\n(Intercept)    1.937e+00  4.674e+00   0.414    0.679\nchol           1.437e-03  1.833e-02   0.078    0.938\ntrestbps      -8.549e-03  3.568e-02  -0.240    0.811\nchol:trestbps -3.045e-05  1.393e-04",
        "  -0.219    0.827\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 416.42  on 301  degrees of freedom\nResidual deviance: 408.61  on 298  degrees of freedom\nAIC: 416.61\n\nNumber of Fisher Scoring iterations: 4\n\n\n> # If everything is correct, move on to calculate the odds ratios and confidence intervals\n> logistic_model_coefficients <- logistic_model_coefficien .... [TRUNCATED] \n\n> head(logistic_model_coefficients)\n           term      estimate    std.error   statistic   p.value odds_ratio",
        "     lower_ci\n1   (Intercept)  1.9370342226 4.6736227027  0.41446098 0.6785365  6.9381434 0.0007294161\n2          chol  0.0014369382 0.0183324893  0.07838205 0.9375241  1.0014380 0.9660934205\n3      trestbps -0.0085493411 0.0356774900 -0.23962843 0.8106183  0.9914871 0.9245231190\n4 chol:trestbps -0.0000304525 0.0001392646 -0.21866651 0.8269098  0.9999695 0.9996966349\n      upper_ci\n1 65995.030316\n2     1.038076\n3     1.063301\n4     1.000243\n\n> # 1. Age and Heart Disease Visualization\n> ggplot(heart_data, aes(x = age, fill = as.factor(target))) +\n+   geom_histogram(position = \"dodge\", bins ",
        " .... [TRUNCATED] \n\n> # 2. Gender Differences in Heart Disease Visualization\n> gender_heart_disease$Gender <- factor(gender_heart_disease$sex, labels = c(\"Female\", \"Male\" .... [TRUNCATED] \n\n> # Enhanced ggplot code with the correct Gender column\n> ggplot(gender_heart_disease, aes(x = Gender, y = prevalence, fill = Gender)) +\n+   geom_bar( .... [TRUNCATED] \n\n> # 3. Chest Pain Type and Heart Disease Visualization\n> colnames(cp_heart_disease)[2] <- 'no_disease'\n\n> colnames(cp_heart_disease)[3] <- 'disease'\n\n> ggplot(cp_heart_disease, aes(x = as.factor(cp))) +\n+   geom_bar(aes(y = no_disease, fill = \"No Heart Disease\"), stat = \"identity\", position = positi",
        " .... [TRUNCATED] \n\n> # New visualizations for the exploratory questions\n> \n> # Visualization for Question 4: Heart Rate and Age\n> ggplot(modified_heart_data, aes(x = reo .... [TRUNCATED] \n\u001B[38;5;232m`geom_smooth()` using formula = 'y ~ x'\u001B[39m\n\n> # Visualization for Question 5: Cholesterol, Blood Pressure, and Heart Disease\n> ggplot(modified_heart_data, aes(x = chol, y = trestbps, color = as. .... [TRUNCATED] \n\u001B[38;5;232m`geom_smooth()` using formula = 'y ~ x'\u001B[39m\n\n> # Assuming logistic_model_coefficients is already loaded and contains the necessary columns\n> # Update the term names to be more descriptive\n> logis",
        " .... [TRUNCATED] \n\n> # Create the plot with updated aesthetics\n> ggplot(logistic_model_coefficients, aes(x = term, y = odds_ratio)) +\n+   geom_point(size = 4, pch = 16)  .... [TRUNCATED] \n\n> # Exporting the visualization to a file (if needed)\n> ggsave(\"logistic_model_odds_ratios.png\", plot = last_plot(), device = \"png\", width = 10, heigh .... [TRUNCATED] \n",
        "Error in f(...) : Graphics API version mismatch\n",
        "> ",
        "source(\"~/StudentDropOutRateAnalysis/data_visualisation.R\", echo=TRUE)",
        "\n> # Load necessary libraries\n> library(tidyverse)\n\n> library(ggplot2)\n\n> library(broom) # for tidy()\n\n> # Load the analyzed data\n> age_summary <- read.csv(\"age_summary.csv\")\n\n> gender_heart_disease <- read.csv(\"gender_heart_disease.csv\")\n\n> cp_heart_disease <- read.csv(\"cp_heart_disease.csv\")\n\n> modified_heart_data <- read.csv(\"modified_heart_data.csv\")\n\n> # Load the logistic model coefficients\n> logistic_model_coefficients <- read.csv(\"interaction_model_coefficients.csv\")\n\n> # Check for 'NA' values and drop them if they are present\n> logistic_model_coefficients <- na.omit(logistic_model_coefficients)",
        "\n\n> # Inspect the Model Summary to ensure everything is labeled correctly\n> # Replace 'your_logistic_model' with the actual logistic model object\n> summ .... [TRUNCATED] \n\nCall:\nglm(formula = target ~ chol * trestbps, family = binomial, data = heart_data)\n\nCoefficients:\n                Estimate Std. Error z value Pr(>|z|)\n(Intercept)    1.937e+00  4.674e+00   0.414    0.679\nchol           1.437e-03  1.833e-02   0.078    0.938\ntrestbps      -8.549e-03  3.568e-02  -0.240    0.811\nchol:trestbps -3.045e-05  1.393e-04",
        "  -0.219    0.827\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 416.42  on 301  degrees of freedom\nResidual deviance: 408.61  on 298  degrees of freedom\nAIC: 416.61\n\nNumber of Fisher Scoring iterations: 4\n\n\n> # If everything is correct, move on to calculate the odds ratios and confidence intervals\n> logistic_model_coefficients <- logistic_model_coefficien .... [TRUNCATED] \n\n> head(logistic_model_coefficients)\n           term      estimate    std.error   statistic   p.value odds_ratio",
        "     lower_ci\n1   (Intercept)  1.9370342226 4.6736227027  0.41446098 0.6785365  6.9381434 0.0007294161\n2          chol  0.0014369382 0.0183324893  0.07838205 0.9375241  1.0014380 0.9660934205\n3      trestbps -0.0085493411 0.0356774900 -0.23962843 0.8106183  0.9914871 0.9245231190\n4 chol:trestbps -0.0000304525 0.0001392646 -0.21866651 0.8269098  0.9999695 0.9996966349\n      upper_ci\n1 65995.030316\n2     1.038076\n3     1.063301\n4     1.000243\n\n> # 1. Age and Heart Disease Visualization\n> ggplot(heart_data, aes(x = age, fill = as.factor(target))) +\n+   geom_histogram(position = \"dodge\", bins ",
        " .... [TRUNCATED] \n\n> # 2. Gender Differences in Heart Disease Visualization\n> gender_heart_disease$Gender <- factor(gender_heart_disease$sex, labels = c(\"Female\", \"Male\" .... [TRUNCATED] \n\n> # Enhanced ggplot code with the correct Gender column\n> ggplot(gender_heart_disease, aes(x = Gender, y = prevalence, fill = Gender)) +\n+   geom_bar( .... [TRUNCATED] \n\n> # 3. Chest Pain Type and Heart Disease Visualization\n> colnames(cp_heart_disease)[2] <- 'no_disease'\n\n> colnames(cp_heart_disease)[3] <- 'disease'\n\n> ggplot(cp_heart_disease, aes(x = as.factor(cp))) +\n+   geom_bar(aes(y = no_disease, fill = \"No Heart Disease\"), stat = \"identity\", position = positi",
        " .... [TRUNCATED] \n\n> # New visualizations for the exploratory questions\n> \n> # Visualization for Question 4: Heart Rate and Age\n> ggplot(modified_heart_data, aes(x = reo .... [TRUNCATED] \n\u001B[38;5;232m`geom_smooth()` using formula = 'y ~ x'\u001B[39m\n\n> # Visualization for Question 5: Cholesterol, Blood Pressure, and Heart Disease\n> ggplot(modified_heart_data, aes(x = chol, y = trestbps, color = as. .... [TRUNCATED] \n\u001B[38;5;232m`geom_smooth()` using formula = 'y ~ x'\u001B[39m\n\n> # Assuming logistic_model_coefficients is already loaded and contains the necessary columns\n> # Update the term names to be more descriptive\n> logis",
        " .... [TRUNCATED] \n\n> # Create the plot with updated aesthetics\n> ggplot(logistic_model_coefficients, aes(x = term, y = odds_ratio)) +\n+   geom_point(size = 4, pch = 16)  .... [TRUNCATED] \n\n> # Exporting the visualization to a file (if needed)\n> ggsave(\"logistic_model_odds_ratios.png\", plot = last_plot(), device = \"png\", width = 10, heigh .... [TRUNCATED] \n",
        "Error in f(...) : Graphics API version mismatch\n",
        "> ",
        "source(\"~/StudentDropOutRateAnalysis/data_analysis.R\", echo=TRUE)",
        "\n> # Load necessary libraries\n> library(tidyverse)\n\n> library(binom)\n\n> # Load the cleaned dataset\n> heart_data <- read.csv(\"cleaned_heart_data.csv\")\n\n> # 1. Age and Heart Disease Analysis\n> # Summary statistics of age for individuals with and without heart disease\n> age_summary <- heart_data %>% \n+  .... [TRUNCATED] \n\n> # 2. Gender Differences in Heart Disease\n> # Calculating the prevalence of heart disease by gender\n> gender_heart_disease <- heart_data %>% \n+   gro .... [TRUNCATED] \n\n> # Calculating the Wilson confidence intervals for the prevalence\n> ci <- binom.confint(x = gender_heart_disease$disease_count, n = gender_heart_dise",
        " .... [TRUNCATED] \n\n> # Adding the CI columns to the gender_heart_disease dataframe\n> gender_heart_disease$ci_lower <- ci$lower\n\n> gender_heart_disease$ci_upper <- ci$upper\n\n> # 3. Chest Pain Type and Heart Disease\n> # Distribution of chest pain types among individuals with and without heart disease\n> cp_heart_disease <- h .... [TRUNCATED] \n\u001B[38;5;232m`summarise()` has grouped output by 'cp'. You can override using the `.groups` argument.\u001B[39m\n\n> # Creating age groups for further analysis\n> heart_data$age_group <- cut(heart_data$age, breaks=c(29, 40, 50, 60, 70, 80), include.lowest=TRUE)",
        "\n\n> # Exporting the analysed data\n> write.csv(heart_data, \"modified_heart_data.csv\", row.names = FALSE) # Dataset with age groups\n\n> write.csv(age_summary, \"age_summary.csv\", row.names = FALSE)\n\n> write.csv(gender_heart_disease, \"gender_heart_disease.csv\", row.names = FALSE)\n\n> write.csv(cp_heart_disease, \"cp_heart_disease.csv\", row.names = FALSE)\n",
        "> ",
        "source(\"~/StudentDropOutRateAnalysis/data_visualisation.R\", echo=TRUE)",
        "\n> # Load necessary libraries\n> library(tidyverse)\n\n> library(ggplot2)\n\n> library(broom) # for tidy()\n\n> # Load the analyzed data\n> age_summary <- read.csv(\"age_summary.csv\")\n\n> gender_heart_disease <- read.csv(\"gender_heart_disease.csv\")\n\n> cp_heart_disease <- read.csv(\"cp_heart_disease.csv\")\n\n> modified_heart_data <- read.csv(\"modified_heart_data.csv\")\n\n> # 1. Age and Heart Disease Visualization\n> ggplot(heart_data, aes(x = age, fill = as.factor(target))) +\n+   geom_histogram(position = \"dodge\", bins  .... [TRUNCATED] ",
        "\n\n> # 2. Gender Differences in Heart Disease Visualization\n> gender_heart_disease$Gender <- factor(gender_heart_disease$sex, labels = c(\"Female\", \"Male\" .... [TRUNCATED] \n\n> # Enhanced ggplot code with the correct Gender column\n> ggplot(gender_heart_disease, aes(x = Gender, y = prevalence, fill = Gender)) +\n+   geom_bar( .... [TRUNCATED] \n\n> # 3. Chest Pain Type and Heart Disease Visualization\n> colnames(cp_heart_disease)[2] <- 'no_disease'\n\n> colnames(cp_heart_disease)[3] <- 'disease'\n\n> ggplot(cp_heart_disease, aes(x = as.factor(cp))) +\n+   geom_bar(aes(y = no_disease, fill = \"No Heart Disease\"), stat = \"identity\", position = positi",
        " .... [TRUNCATED] \n\n> # New visualizations for the exploratory questions\n> \n> # Visualization for Question 4: Heart Rate and Age\n> ggplot(modified_heart_data, aes(x = reo .... [TRUNCATED] \n\u001B[38;5;232m`geom_smooth()` using formula = 'y ~ x'\u001B[39m\n\n> # Visualization for Question 5: Cholesterol, Blood Pressure, and Heart Disease\n> ggplot(modified_heart_data, aes(x = chol, y = trestbps, color = as. .... [TRUNCATED] \n\u001B[38;5;232m`geom_smooth()` using formula = 'y ~ x'\u001B[39m\n\n> # Exporting the visualizations to files (if needed)\n> ggsave(\"age_distribution_by_heart_disease_status.png\", plot = last_plot(), device = \"png\")",
        "\n\u001B[38;5;232mSaving 8.53 x 5.57 in image\u001B[39m\n",
        "Error in f(...) : Graphics API version mismatch\n",
        "> ",
        "source(\"~/StudentDropOutRateAnalysis/data_visualisation.R\", echo=TRUE)",
        "\n> # Load necessary libraries\n> library(tidyverse)\n\n> library(ggplot2)\n\n> library(plotly)\n\n> # Load the analyzed data\n> age_summary <- read.csv(\"age_summary.csv\")\n\n> gender_heart_disease <- read.csv(\"gender_heart_disease.csv\")\n\n> cp_heart_disease <- read.csv(\"cp_heart_disease.csv\")\n\n> modified_heart_data <- read.csv(\"modified_heart_data.csv\")\n\n> # 1. Age and Heart Disease Visualization\n> p1 <- ggplot(heart_data, aes(x = age, fill = as.factor(target))) +\n+   geom_histogram(position = \"dodge\", .... [TRUNCATED] ",
        "\n\n> # Convert to interactive plotly object\n> p1 <- ggplotly(p1)\n\n> # 2. Gender Differences in Heart Disease Visualization\n> p2 <- ggplot(gender_heart_disease, aes(x = Gender, y = prevalence, fill = Gender)) +\n+   ge .... [TRUNCATED] \n\n> # Convert to interactive plotly object\n> p2 <- ggplotly(p2)\n",
        "Error: object 'Gender' not found\n",
        "> ",
        "source(\"~/StudentDropOutRateAnalysis/data_visualisation.R\", echo=TRUE)",
        "\n> # Load necessary libraries\n> library(tidyverse)\n\n> library(ggplot2)\n\n> library(plotly)\n\n> # Load the analyzed data\n> age_summary <- read.csv(\"age_summary.csv\")\n\n> gender_heart_disease <- read.csv(\"gender_heart_disease.csv\")\n\n> cp_heart_disease <- read.csv(\"cp_heart_disease.csv\")\n\n> modified_heart_data <- read.csv(\"modified_heart_data.csv\")\n\n> # 1. Age and Heart Disease Visualization\n> p1 <- ggplot(heart_data, aes(x = age, fill = as.factor(target))) +\n+   geom_histogram(position = \"dodge\", .... [TRUNCATED] ",
        "\n\n> # Convert to interactive plotly object\n> p1 <- ggplotly(p1)\n\n> # 2. Gender Differences in Heart Disease Visualization\n> gender_heart_disease$Gender <- factor(gender_heart_disease$sex, labels = c(\"Female\", \"Male\" .... [TRUNCATED] \n\n> p2 <- ggplot(gender_heart_disease, aes(x = Gender, y = prevalence, fill = Gender)) +\n+   geom_bar(stat = \"identity\", position = position_dodge()) +\n .... [TRUNCATED] \n\n> # Convert to interactive plotly object\n> p2 <- ggplotly(p2)\n\n> # 3. Chest Pain Type and Heart Disease Visualization\n> p3 <- ggplot(cp_heart_disease, aes(x = as.factor(cp))) +\n+   geom_bar(aes(y = no_disease, fil",
        " .... [TRUNCATED] \n\n> # Convert to interactive plotly object\n> p3 <- ggplotly(p3)\n",
        "Error: object 'no_disease' not found\n",
        "> ",
        "source(\"~/StudentDropOutRateAnalysis/data_visualisation.R\", echo=TRUE)",
        "\n> # Load necessary libraries\n> library(tidyverse)\n\n> library(ggplot2)\n\n> library(plotly)\n\n> # Load the analyzed data\n> age_summary <- read.csv(\"age_summary.csv\")\n\n> gender_heart_disease <- read.csv(\"gender_heart_disease.csv\")\n\n> cp_heart_disease <- read.csv(\"cp_heart_disease.csv\")\n\n> modified_heart_data <- read.csv(\"modified_heart_data.csv\")\n\n> # 1. Age and Heart Disease Visualization\n> p1 <- ggplot(heart_data, aes(x = age, fill = as.factor(target))) +\n+   geom_histogram(position = \"dodge\", .... [TRUNCATED] ",
        "\n\n> # Convert to interactive plotly object\n> p1 <- ggplotly(p1)\n\n> # 2. Gender Differences in Heart Disease Visualization\n> gender_heart_disease$Gender <- factor(gender_heart_disease$sex, labels = c(\"Female\", \"Male\" .... [TRUNCATED] \n\n> p2 <- ggplot(gender_heart_disease, aes(x = Gender, y = prevalence, fill = Gender)) +\n+   geom_bar(stat = \"identity\", position = position_dodge()) +\n .... [TRUNCATED] \n\n> # Convert to interactive plotly object\n> p2 <- ggplotly(p2)\n\n> # Correcting the names of the columns after spreading the data\n> cp_heart_disease <- cp_heart_disease %>%\n+   rename(no_disease = `0`, disease = `1`",
        " .... [TRUNCATED] \n\u001B[1m\u001B[33mError\u001B[39m in `rename()`:\u001B[22m\n\u001B[33m!\u001B[39m Can't rename columns that don't exist.\n\u001B[31mâœ–\u001B[39m Column `0` doesn't exist.\n\u001B[90mRun `\u001B]8;;rstudio:run:rlang::last_trace()\u0007rlang::last_trace()\u001B]8;;\u0007` to see where the error occurred.\u001B[39m\n",
        "> ",
        "source(\"~/StudentDropOutRateAnalysis/data_visualisation.R\", echo=TRUE)",
        "\n> # Load necessary libraries\n> library(tidyverse)\n\n> library(ggplot2)\n\n> library(plotly)\n\n> # Load the analyzed data\n> age_summary <- read.csv(\"age_summary.csv\")\n\n> gender_heart_disease <- read.csv(\"gender_heart_disease.csv\")\n\n> cp_heart_disease <- read.csv(\"cp_heart_disease.csv\")\n\n> print(names(cp_heart_disease))\n[1] \"cp\" \"X0\" \"X1\"\n\n> modified_heart_data <- read.csv(\"modified_heart_data.csv\")\n\n> # 1. Age and Heart Disease Visualization\n> p1 <- ggplot(heart_data, aes(x = age, fill = as.factor(target))) +\n+   geom_histogram(position = \"dodge\",",
        " .... [TRUNCATED] \n\n> # Convert to interactive plotly object\n> p1 <- ggplotly(p1)\n\n> # 2. Gender Differences in Heart Disease Visualization\n> gender_heart_disease$Gender <- factor(gender_heart_disease$sex, labels = c(\"Female\", \"Male\" .... [TRUNCATED] \n\n> p2 <- ggplot(gender_heart_disease, aes(x = Gender, y = prevalence, fill = Gender)) +\n+   geom_bar(stat = \"identity\", position = position_dodge()) +\n .... [TRUNCATED] \n\n> # Convert to interactive plotly object\n> p2 <- ggplotly(p2)\n\n> # Correcting the names of the columns after spreading the data\n> cp_heart_disease <- cp_heart_disease %>%\n+   rename(no_disease = `0`, disease = `1`",
        " .... [TRUNCATED] \n\u001B[1m\u001B[33mError\u001B[39m in `rename()`:\u001B[22m\n\u001B[33m!\u001B[39m Can't rename columns that don't exist.\n\u001B[31mâœ–\u001B[39m Column `0` doesn't exist.\n\u001B[90mRun `\u001B]8;;rstudio:run:rlang::last_trace()\u0007rlang::last_trace()\u001B]8;;\u0007` to see where the error occurred.\u001B[39m\n",
        "> ",
        "source(\"~/StudentDropOutRateAnalysis/data_visualisation.R\", echo=TRUE)",
        "\n> # Load necessary libraries\n> library(tidyverse)\n\n> library(ggplot2)\n\n> library(plotly)\n\n> # Load the analyzed data\n> age_summary <- read.csv(\"age_summary.csv\")\n\n> gender_heart_disease <- read.csv(\"gender_heart_disease.csv\")\n\n> cp_heart_disease <- read.csv(\"cp_heart_disease.csv\")\n\n> print(names(cp_heart_disease))\n[1] \"cp\" \"X0\" \"X1\"\n\n> modified_heart_data <- read.csv(\"modified_heart_data.csv\")\n\n> # 1. Age and Heart Disease Visualization\n> p1 <- ggplot(heart_data, aes(x = age, fill = as.factor(target))) +\n+   geom_histogram(position = \"dodge\",",
        " .... [TRUNCATED] \n\n> # Convert to interactive plotly object\n> p1 <- ggplotly(p1)\n\n> # 2. Gender Differences in Heart Disease Visualization\n> gender_heart_disease$Gender <- factor(gender_heart_disease$sex, labels = c(\"Female\", \"Male\" .... [TRUNCATED] \n\n> p2 <- ggplot(gender_heart_disease, aes(x = Gender, y = prevalence, fill = Gender)) +\n+   geom_bar(stat = \"identity\", position = position_dodge()) +\n .... [TRUNCATED] \n\n> # Convert to interactive plotly object\n> p2 <- ggplotly(p2)\n\n> # Correcting the names of the columns after spreading the data\n> cp_heart_disease <- cp_heart_disease %>%\n+   rename(no_disease = `X0`, disease = `X",
        " .... [TRUNCATED] \n\n> # 3. Chest Pain Type and Heart Disease Visualization\n> p3 <- ggplot(cp_heart_disease, aes(x = as.factor(cp))) +\n+   geom_bar(aes(y = no_disease, fil .... [TRUNCATED] \n\n> # Convert to interactive plotly object\n> p3 <- ggplotly(p3)\n\n> # 4. Max Heart Rate Achieved vs Age Group by Heart Disease Status Visualization\n> p4 <- ggplot(modified_heart_data, aes(x = reorder(age_group, age), .... [TRUNCATED] \n\n> # Convert to interactive plotly object\n> p4 <- ggplotly(p4)\n\u001B[38;5;232m`geom_smooth()` using formula = 'y ~ x'\u001B[39m\n",
        "\n> # 5. Interaction of Cholesterol Levels and Resting Blood Pressure on Heart Disease Visualization\n> p5 <- ggplot(modified_heart_data, aes(x = chol, y .... [TRUNCATED] \n\n> # Convert to interactive plotly object\n> p5 <- ggplotly(p5)\n\u001B[38;5;232m`geom_smooth()` using formula = 'y ~ x'\u001B[39m\n\n> # Display the interactive plots\n> p1\n\n> p2\n\n> p3\n\n> p4\n\n> p5\n\n> # Optionally, save the interactive plots as HTML files\n> htmlwidgets::saveWidget(p1, \"age_distribution_by_heart_disease_status.html\")\n\n> htmlwidgets::saveWidget",
        "\nfunction (widget, file, selfcontained = TRUE, libdir = NULL, \n    background = \"white\", title = class(widget)[[1]], knitrOptions = list()) \n{\n    if (grepl(\"^#\", background, perl = TRUE)) {\n        bgcol <- grDevices::col2rgb(background, alpha = TRUE)\n        background <- sprintf(\"rgba(%d,%d,%d,%f)\", bgcol[1, 1], \n            bgcol[2, 1], bgcol[3, 1], bgcol[4, 1]/255)\n    }\n    html <- toHTML(widget, standalone = TRUE, knitrOptions = knitrOptions)\n    if (is.null(libdir)) {\n        libdir <- paste(tools::file_path_sans_ext(basename(file)), \n",
        "            \"_files\", sep = \"\")\n    }\n    if (selfcontained) {\n        write_md_for_pandoc(html, file = file, libdir = libdir, \n            background = background, title = title)\n        pandoc_self_contained_html(file, file)\n        unlink(libdir, recursive = TRUE)\n    }\n    else {\n        html <- tagList(tags$head(tags$title(title)), html)\n        htmltools::save_html(html, file = file, libdir = libdir, \n            background = background)\n    }\n    invisible(NULL)\n}\n<bytecode: 0x000001e7b3c3b6e8>\n<environment: namespace:htmlwidgets>\n",
        "> ",
        "source(\"~/StudentDropOutRateAnalysis/data_visualisation.R\", echo=TRUE)",
        "\n> # Load necessary libraries\n> library(tidyverse)\n\n> library(ggplot2)\n\n> library(plotly)\n\n> # Load the analyzed data\n> age_summary <- read.csv(\"age_summary.csv\")\n\n> gender_heart_disease <- read.csv(\"gender_heart_disease.csv\")\n\n> cp_heart_disease <- read.csv(\"cp_heart_disease.csv\")\n\n> modified_heart_data <- read.csv(\"modified_heart_data.csv\")\n\n> # 1. Age and Heart Disease Visualization\n> p1 <- ggplot(heart_data, aes(x = age, fill = as.factor(target), text = paste(\"Age:\", age, \"<br>Heart Dise ...\" ... [TRUNCATED] ",
        "\n\n> p1 <- ggplotly(p1, tooltip = \"text\")\n\n> # 2. Gender Differences in Heart Disease Visualization\n> p2 <- ggplot(gender_heart_disease, aes(x = Gender, y = prevalence, fill = Gender, \n+        .... [TRUNCATED] \n\n> p2 <- ggplotly(p2, tooltip = \"text\")\n",
        "Error: object 'Gender' not found\n",
        "> ",
        "source(\"~/StudentDropOutRateAnalysis/data_visualisation.R\", echo=TRUE)",
        "\n> # Load necessary libraries\n> library(tidyverse)\n\n> library(ggplot2)\n\n> library(plotly)\n\n> # Load the analyzed data\n> age_summary <- read.csv(\"age_summary.csv\")\n\n> gender_heart_disease <- read.csv(\"gender_heart_disease.csv\")\n\n> cp_heart_disease <- read.csv(\"cp_heart_disease.csv\")\n\n> modified_heart_data <- read.csv(\"modified_heart_data.csv\")\n\n> # 1. Age and Heart Disease Visualization\n> p1 <- ggplot(heart_data, aes(x = age, fill = as.factor(target), text = paste(\"Age:\", age, \"<br>Heart Dise ...\" ... [TRUNCATED] ",
        "\n\n> p1 <- ggplotly(p1, tooltip = \"text\")\n\n> # 2. Gender Differences in Heart Disease Visualization\n> p2 <- ggplot(gender_heart_disease, aes(x = Gender, y = prevalence, fill = Gender, \n+        .... [TRUNCATED] \n\n> p2 <- ggplotly(p2, tooltip = \"text\")\n",
        "Error: object 'Gender' not found\n",
        "> ",
        "source(\"~/StudentDropOutRateAnalysis/data_visualisation.R\", echo=TRUE)",
        "\n> # Load necessary libraries\n> library(tidyverse)\n\n> library(ggplot2)\n\n> library(plotly)\n\n> # Load the analyzed data\n> age_summary <- read.csv(\"age_summary.csv\")\n\n> gender_heart_disease <- read.csv(\"gender_heart_disease.csv\")\n\n> cp_heart_disease <- read.csv(\"cp_heart_disease.csv\")\n\n> print(names(cp_heart_disease))\n[1] \"cp\" \"X0\" \"X1\"\n\n> modified_heart_data <- read.csv(\"modified_heart_data.csv\")\n\n> # 1. Age and Heart Disease Visualization\n> p1 <- ggplot(heart_data, aes(x = age, fill = as.factor(target))) +\n+   geom_histogram(position = \"dodge\",",
        " .... [TRUNCATED] \n\n> # Convert to interactive plotly object\n> p1 <- ggplotly(p1)\n\n> # 2. Gender Differences in Heart Disease Visualization\n> gender_heart_disease$Gender <- factor(gender_heart_disease$sex, labels = c(\"Female\", \"Male\" .... [TRUNCATED] \n\n> p2 <- ggplot(gender_heart_disease, aes(x = Gender, y = prevalence, fill = Gender)) +\n+   geom_bar(stat = \"identity\", position = position_dodge()) +\n .... [TRUNCATED] \n\n> # Convert to interactive plotly object\n> p2 <- ggplotly(p2)\n\n> # Correcting the names of the columns after spreading the data\n> cp_heart_disease <- cp_heart_disease %>%\n+   rename(no_disease = `X0`, disease = `X",
        " .... [TRUNCATED] \n\n> # 3. Chest Pain Type and Heart Disease Visualization\n> p3 <- ggplot(cp_heart_disease, aes(x = as.factor(cp))) +\n+   geom_bar(aes(y = no_disease, fil .... [TRUNCATED] \n\n> # Convert to interactive plotly object\n> p3 <- ggplotly(p3)\n\n> # 4. Max Heart Rate Achieved vs Age Group by Heart Disease Status Visualization\n> p4 <- ggplot(modified_heart_data, aes(x = reorder(age_group, age), .... [TRUNCATED] \n\n> # Convert to interactive plotly object\n> p4 <- ggplotly(p4)\n\u001B[38;5;232m`geom_smooth()` using formula = 'y ~ x'\u001B[39m\n",
        "\n> # 5. Interaction of Cholesterol Levels and Resting Blood Pressure on Heart Disease Visualization\n> p5 <- ggplot(modified_heart_data, aes(x = chol, y .... [TRUNCATED] \n\n> # Convert to interactive plotly object\n> p5 <- ggplotly(p5)\n\u001B[38;5;232m`geom_smooth()` using formula = 'y ~ x'\u001B[39m\n\n> # Display the interactive plots\n> p1\n\n> p2\n\n> p3\n\n> p4\n\n> p5\n\n> # Optionally, save the interactive plots as HTML files\n> htmlwidgets::saveWidget(p1, \"age_distribution_by_heart_disease_status.html\")\n\n> htmlwidgets::saveWidget",
        "\nfunction (widget, file, selfcontained = TRUE, libdir = NULL, \n    background = \"white\", title = class(widget)[[1]], knitrOptions = list()) \n{\n    if (grepl(\"^#\", background, perl = TRUE)) {\n        bgcol <- grDevices::col2rgb(background, alpha = TRUE)\n        background <- sprintf(\"rgba(%d,%d,%d,%f)\", bgcol[1, 1], \n            bgcol[2, 1], bgcol[3, 1], bgcol[4, 1]/255)\n    }\n    html <- toHTML(widget, standalone = TRUE, knitrOptions = knitrOptions)\n    if (is.null(libdir)) {\n        libdir <- paste(tools::file_path_sans_ext(basename(file)), \n",
        "            \"_files\", sep = \"\")\n    }\n    if (selfcontained) {\n        write_md_for_pandoc(html, file = file, libdir = libdir, \n            background = background, title = title)\n        pandoc_self_contained_html(file, file)\n        unlink(libdir, recursive = TRUE)\n    }\n    else {\n        html <- tagList(tags$head(tags$title(title)), html)\n        htmltools::save_html(html, file = file, libdir = libdir, \n            background = background)\n    }\n    invisible(NULL)\n}\n<bytecode: 0x000001e7b3c3b6e8>\n<environment: namespace:htmlwidgets>\n",
        "> ",
        "source(\"~/StudentDropOutRateAnalysis/data_visualisation.R\", echo=TRUE)",
        "\n> # Load necessary libraries\n> library(tidyverse)\n\n> library(ggplot2)\n\n> library(plotly)\n\n> # Load the analyzed data\n> age_summary <- read.csv(\"age_summary.csv\")\n\n> gender_heart_disease <- read.csv(\"gender_heart_disease.csv\")\n\n> cp_heart_disease <- read.csv(\"cp_heart_disease.csv\")\n\n> print(names(cp_heart_disease))\n[1] \"cp\" \"X0\" \"X1\"\n\n> modified_heart_data <- read.csv(\"modified_heart_data.csv\")\n\n> # 1. Age and Heart Disease Visualization\n> p1 <- ggplot(heart_data, aes(x = age, fill = as.factor(target), text = paste(\"Age:\", age, \"<br>Heart Dise",
        " ...\" ... [TRUNCATED] \n\n> # Convert to interactive plotly object\n> p1 <- ggplotly(p1, tooltip = \"text\")\n\n> # 2. Gender Differences in Heart Disease Visualization\n> gender_heart_disease$Gender <- factor(gender_heart_disease$sex, labels = c(\"Female\", \"Male\" .... [TRUNCATED] \n\n> p2 <- ggplot(gender_heart_disease, aes(x = Gender, y = prevalence, fill = Gender)) +\n+   geom_bar(stat = \"identity\", position = position_dodge()) +\n .... [TRUNCATED] \n\n> # Convert to interactive plotly object\n> p2 <- ggplotly(p2)\n\n> # Correcting the names of the columns after spreading the data\n> cp_heart_disease <- cp_heart_disease %>%\n+   rename(no_disease = `X0`, disease = `X",
        " .... [TRUNCATED] \n\n> # 3. Chest Pain Type and Heart Disease Visualization\n> p3 <- ggplot(cp_heart_disease, aes(x = as.factor(cp))) +\n+   geom_bar(aes(y = no_disease, fil .... [TRUNCATED] \n\n> # Convert to interactive plotly object\n> p3 <- ggplotly(p3)\n\n> # 4. Max Heart Rate Achieved vs Age Group by Heart Disease Status Visualization\n> p4 <- ggplot(modified_heart_data, aes(x = reorder(age_group, age), .... [TRUNCATED] \n\n> # Convert to interactive plotly object\n> p4 <- ggplotly(p4)\n\u001B[38;5;232m`geom_smooth()` using formula = 'y ~ x'\u001B[39m\n",
        "\n> # 5. Interaction of Cholesterol Levels and Resting Blood Pressure on Heart Disease Visualization\n> p5 <- ggplot(modified_heart_data, aes(x = chol, y .... [TRUNCATED] \n\n> # Convert to interactive plotly object\n> p5 <- ggplotly(p5)\n\u001B[38;5;232m`geom_smooth()` using formula = 'y ~ x'\u001B[39m\n\n> # Display the interactive plots\n> p1\n\n> p2\n\n> p3\n\n> p4\n\n> p5\n\n> # Optionally, save the interactive plots as HTML files\n> htmlwidgets::saveWidget(p1, \"age_distribution_by_heart_disease_status.html\")\n\n> htmlwidgets::saveWidget(p2, \"gender_prevalence_of_heart_disease.html\")",
        "\n\n> htmlwidgets::saveWidget(p3, \"chest_pain_type_distribution_by_heart_disease_status.html\")\n\n> htmlwidgets::saveWidget(p4, \"max_heart_rate_vs_age_group_by_heart_disease_status.html\")\n\n> htmlwidgets::saveWidget(p5, \"cholesterol_bp_heart_disease.html\")\n",
        "> ",
        "source(\"~/StudentDropOutRateAnalysis/data_visualisation.R\", echo=TRUE)",
        "\n> # Load necessary libraries\n> library(tidyverse)\n\n> library(ggplot2)\n\n> library(plotly)\n\n> # Load the analyzed data\n> age_summary <- read.csv(\"age_summary.csv\")\n\n> gender_heart_disease <- read.csv(\"gender_heart_disease.csv\")\n\n> cp_heart_disease <- read.csv(\"cp_heart_disease.csv\")\n\n> print(names(cp_heart_disease))\n[1] \"cp\" \"X0\" \"X1\"\n\n> modified_heart_data <- read.csv(\"modified_heart_data.csv\")\n\n> # 1. Age and Heart Disease Visualization\n> p1 <- ggplot(heart_data, aes(x = age, fill = as.factor(target))) +\n+   geom_histogram(position = \"dodge\",",
        " .... [TRUNCATED] \n\n> # Convert to interactive plotly object\n> p1 <- ggplotly(p1)\n\n> # 2. Gender Differences in Heart Disease Visualization\n> gender_heart_disease$Gender <- factor(gender_heart_disease$sex, labels = c(\"Female\", \"Male\" .... [TRUNCATED] \n\n> p2 <- ggplot(gender_heart_disease, aes(x = Gender, y = prevalence, fill = Gender)) +\n+   geom_bar(stat = \"identity\", position = position_dodge()) +\n .... [TRUNCATED] \n\n> # Convert to interactive plotly object\n> p2 <- ggplotly(p2)\n\n> # Correcting the names of the columns after spreading the data\n> cp_heart_disease <- cp_heart_disease %>%\n+   rename(no_disease = `X0`, disease = `X",
        " .... [TRUNCATED] \n\n> # 3. Chest Pain Type and Heart Disease Visualization\n> p3 <- ggplot(cp_heart_disease, aes(x = as.factor(cp))) +\n+   geom_bar(aes(y = no_disease, fil .... [TRUNCATED] \n\n> # Convert to interactive plotly object\n> p3 <- ggplotly(p3)\n\n> # 4. Max Heart Rate Achieved vs Age Group by Heart Disease Status Visualization\n> p4 <- ggplot(modified_heart_data, aes(x = reorder(age_group, age), .... [TRUNCATED] \n\n> # Convert to interactive plotly object\n> p4 <- ggplotly(p4)\n\u001B[38;5;232m`geom_smooth()` using formula = 'y ~ x'\u001B[39m\n",
        "\n> # 5. Interaction of Cholesterol Levels and Resting Blood Pressure on Heart Disease Visualization\n> p5 <- ggplot(modified_heart_data, aes(x = chol, y .... [TRUNCATED] \n\n> # Convert to interactive plotly object\n> p5 <- ggplotly(p5)\n\u001B[38;5;232m`geom_smooth()` using formula = 'y ~ x'\u001B[39m\n\n> # Display the interactive plots\n> p1\n\n> p2\n\n> p3\n\n> p4\n\n> p5\n\n> # Optionally, save the interactive plots as HTML files\n> htmlwidgets::saveWidget(p1, \"age_distribution_by_heart_disease_status.html\")\n\n> htmlwidgets::saveWidget(p2, \"gender_prevalence_of_heart_disease.html\")",
        "\n\n> htmlwidgets::saveWidget(p3, \"chest_pain_type_distribution_by_heart_disease_status.html\")\n\n> htmlwidgets::saveWidget(p4, \"max_heart_rate_vs_age_group_by_heart_disease_status.html\")\n\n> htmlwidgets::saveWidget(p5, \"cholesterol_bp_heart_disease.html\")\n",
        "> ",
        "source(\"~/StudentDropOutRateAnalysis/data_visualisation.R\", echo=TRUE)",
        "\n> # Load necessary libraries\n> library(tidyverse)\n\n> library(ggplot2)\n\n> library(plotly)\n\n> # Load the analyzed data\n> age_summary <- read.csv(\"age_summary.csv\")\n\n> gender_heart_disease <- read.csv(\"gender_heart_disease.csv\")\n\n> cp_heart_disease <- read.csv(\"cp_heart_disease.csv\")\n\n> print(names(cp_heart_disease))\n[1] \"cp\" \"X0\" \"X1\"\n\n> modified_heart_data <- read.csv(\"modified_heart_data.csv\")\n\n> # 1. Age and Heart Disease Visualization\n> p1 <- ggplot(heart_data, aes(x = age, fill = as.factor(target))) +\n+   geom_histogram(position = \"dodge\",",
        " .... [TRUNCATED] \n\n> # Convert to interactive plotly object\n> p1 <- ggplotly(p1)\n\n> # 2. Gender Differences in Heart Disease Visualization\n> gender_heart_disease$Gender <- factor(gender_heart_disease$sex, labels = c(\"Female\", \"Male\" .... [TRUNCATED] \n\n> p2 <- ggplot(gender_heart_disease, aes(x = Gender, y = prevalence, fill = Gender)) +\n+   geom_bar(stat = \"identity\", position = position_dodge()) +\n .... [TRUNCATED] \n\n> # Convert to interactive plotly object\n> p2 <- ggplotly(p2)\n\n> # Correcting the names of the columns after spreading the data\n> cp_heart_disease <- cp_heart_disease %>%\n+   rename(no_disease = `X0`, disease = `X",
        " .... [TRUNCATED] \n\n> # 3. Chest Pain Type and Heart Disease Visualization\n> p3 <- ggplot(cp_heart_disease, aes(x = as.factor(cp))) +\n+   geom_bar(aes(y = no_disease, fil .... [TRUNCATED] \n\n> # Convert to interactive plotly object\n> p3 <- ggplotly(p3)\n\n> # 4. Max Heart Rate Achieved vs Age Group by Heart Disease Status Visualization\n> p4 <- ggplot(modified_heart_data, aes(x = reorder(age_group, age), .... [TRUNCATED] \n\n> # Convert to interactive plotly object\n> p4 <- ggplotly(p4)\n\u001B[38;5;232m`geom_smooth()` using formula = 'y ~ x'\u001B[39m\n",
        "\n> # 5. Interaction of Cholesterol Levels and Resting Blood Pressure on Heart Disease Visualization\n> p5 <- ggplot(modified_heart_data, aes(x = chol, y .... [TRUNCATED] \n\n> # Convert to interactive plotly object\n> p5 <- ggplotly(p5)\n\u001B[38;5;232m`geom_smooth()` using formula = 'y ~ x'\u001B[39m\n\n> # Display the interactive plots\n> p1\n\n> p2\n\n> p3\n\n> p4\n\n> p5\n\n> # Optionally, save the interactive plots as HTML files\n> htmlwidgets::saveWidget(p1, \"age_distribution_by_heart_disease_status.html\")\n\n> htmlwidgets::saveWidget(p2, \"gender_prevalence_of_heart_disease.html\")",
        "\n\n> htmlwidgets::saveWidget(p3, \"chest_pain_type_distribution_by_heart_disease_status.html\")\n\n> htmlwidgets::saveWidget(p4, \"max_heart_rate_vs_age_group_by_heart_disease_status.html\")\n\n> htmlwidgets::saveWidget(p5, \"cholesterol_bp_heart_disease.html\")\n",
        "> ",
        "source(\"~/StudentDropOutRateAnalysis/data_visualisation.R\", echo=TRUE)",
        "\n> library(tidyverse)\n\n> library(ggplot2)\n\n> library(plotly)\n\n> # Load the analyzed data\n> age_summary <- read.csv(\"age_summary.csv\")\n\n> gender_heart_disease <- read.csv(\"gender_heart_disease.csv\")\n\n> cp_heart_disease <- read.csv(\"cp_heart_disease.csv\")\n\n> modified_heart_data <- read.csv(\"modified_heart_data.csv\")\n\n> # 1. Age and Heart Disease Visualization\n> ggplot(heart_data, aes(x = age, fill = as.factor(target))) +\n+   geom_histogram(position = \"dodge\", bins  .... [TRUNCATED] \n\n> # 2. Gender Differences in Heart Disease Visualization\n> gender_heart_disease$Gender <- factor(gender_heart_disease$sex, labels = c(\"Female\", \"Male\"",
        " .... [TRUNCATED] \n\n> # Enhanced ggplot code with the correct Gender column\n> ggplot(gender_heart_disease, aes(x = Gender, y = prevalence, fill = Gender)) +\n+   geom_bar( .... [TRUNCATED] \n\n> # 3. Chest Pain Type and Heart Disease Visualization\n> colnames(cp_heart_disease)[2] <- 'no_disease'\n\n> colnames(cp_heart_disease)[3] <- 'disease'\n\n> ggplot(cp_heart_disease, aes(x = as.factor(cp))) +\n+   geom_bar(aes(y = no_disease, fill = \"No Heart Disease\"), stat = \"identity\", position = positi .... [TRUNCATED] \n\n> # New visualizations for the exploratory questions\n> \n> # Visualization for Question 4: Heart Rate and Age\n> ggplot(modified_heart_data, aes(x = reo",
        " .... [TRUNCATED] \n\u001B[38;5;232m`geom_smooth()` using formula = 'y ~ x'\u001B[39m\n\n> # Visualization for Question 5: Cholesterol, Blood Pressure, and Heart Disease\n> ggplot(modified_heart_data, aes(x = chol, y = trestbps, color = as. .... [TRUNCATED] \n\u001B[38;5;232m`geom_smooth()` using formula = 'y ~ x'\u001B[39m\n\n> # Exporting the visualizations to files (if needed)\n> ggsave(\"age_distribution_by_heart_disease_status.png\", plot = last_plot(), device = \"png\")\n\u001B[38;5;232mSaving 8.53 x 5.57 in image\u001B[39m\n",
        "Error in f(...) : Graphics API version mismatch\n",
        "> ",
        "source(\"~/StudentDropOutRateAnalysis/data_visualisation.R\", echo=TRUE)",
        "\n> library(tidyverse)\n\n> library(ggplot2)\n\n> library(plotly)\n\n> # Load the analyzed data\n> age_summary <- read.csv(\"age_summary.csv\")\n\n> gender_heart_disease <- read.csv(\"gender_heart_disease.csv\")\n\n> cp_heart_disease <- read.csv(\"cp_heart_disease.csv\")\n\n> modified_heart_data <- read.csv(\"modified_heart_data.csv\")\n\n> # 1. Age and Heart Disease Visualization\n> ggplot(heart_data, aes(x = age, fill = as.factor(target))) +\n+   geom_histogram(position = \"dodge\", bins  .... [TRUNCATED] \n\n> # 2. Gender Differences in Heart Disease Visualization\n> gender_heart_disease$Gender <- factor(gender_heart_disease$sex, labels = c(\"Female\", \"Male\"",
        " .... [TRUNCATED] \n\n> # Enhanced ggplot code with the correct Gender column\n> ggplot(gender_heart_disease, aes(x = Gender, y = prevalence, fill = Gender)) +\n+   geom_bar( .... [TRUNCATED] \n\n> # 3. Chest Pain Type and Heart Disease Visualization\n> colnames(cp_heart_disease)[2] <- 'no_disease'\n\n> colnames(cp_heart_disease)[3] <- 'disease'\n\n> ggplot(cp_heart_disease, aes(x = as.factor(cp))) +\n+   geom_bar(aes(y = no_disease, fill = \"No Heart Disease\"), stat = \"identity\", position = positi .... [TRUNCATED] \n\n> # New visualizations for the exploratory questions\n> \n> # 4. Max Heart Rate Achieved vs Age Group by Heart Disease Status Visualization\n> p4 <- ggpl",
        " .... [TRUNCATED] \n\n> p4 <- ggplotly(p4, tooltip = \"text\")\n\u001B[38;5;232m`geom_smooth()` using formula = 'y ~ x'\u001B[39m\n\n> # 5. Interaction of Cholesterol Levels and Resting Blood Pressure on Heart Disease Visualization\n> p5 <- ggplot(modified_heart_data, aes(x = chol, y .... [TRUNCATED] \n\n> p5 <- ggplotly(p5, tooltip = \"text\")\n\u001B[38;5;232m`geom_smooth()` using formula = 'y ~ x'\u001B[39m\n\n> # Exporting the visualizations to files (if needed)\n> ggsave(\"age_distribution_by_heart_disease_status.png\", plot = last_plot(), device = \"png\")",
        "\n\u001B[38;5;232mSaving 8.53 x 5.57 in image\u001B[39m\n",
        "Error in f(...) : Graphics API version mismatch\n",
        "In addition: ",
        "Warning message:\n",
        "\u001B[38;5;232mThe following aesthetics were dropped during statistical transformation: \u001B[32mtext\u001B[38;5;232m\n\u001B[36mâ„¹\u001B[38;5;232m This can happen when ggplot fails to infer the correct grouping structure in the data.\n\u001B[36mâ„¹\u001B[38;5;232m Did you forget to specify a `group` aesthetic or to convert a numerical variable into a factor?\u001B[39m \n",
        "> ",
        "source(\"~/StudentDropOutRateAnalysis/data_visualisation.R\", echo=TRUE)",
        "\n> library(tidyverse)\n\n> library(ggplot2)\n\n> library(plotly)\n\n> # Load the analyzed data\n> age_summary <- read.csv(\"age_summary.csv\")\n\n> gender_heart_disease <- read.csv(\"gender_heart_disease.csv\")\n\n> cp_heart_disease <- read.csv(\"cp_heart_disease.csv\")\n\n> modified_heart_data <- read.csv(\"modified_heart_data.csv\")\n\n> # 1. Age and Heart Disease Visualization\n> ggplot(heart_data, aes(x = age, fill = as.factor(target))) +\n+   geom_histogram(position = \"dodge\", bins  .... [TRUNCATED] \n\n> # 2. Gender Differences in Heart Disease Visualization\n> gender_heart_disease$Gender <- factor(gender_heart_disease$sex, labels = c(\"Female\", \"Male\"",
        " .... [TRUNCATED] \n\n> # Enhanced ggplot code with the correct Gender column\n> ggplot(gender_heart_disease, aes(x = Gender, y = prevalence, fill = Gender)) +\n+   geom_bar( .... [TRUNCATED] \n\n> # 3. Chest Pain Type and Heart Disease Visualization\n> colnames(cp_heart_disease)[2] <- 'no_disease'\n\n> colnames(cp_heart_disease)[3] <- 'disease'\n\n> ggplot(cp_heart_disease, aes(x = as.factor(cp))) +\n+   geom_bar(aes(y = no_disease, fill = \"No Heart Disease\"), stat = \"identity\", position = positi .... [TRUNCATED] \n\n> # New visualizations for the exploratory questions\n> \n> # 4. Max Heart Rate Achieved vs Age Group by Heart Disease Status Visualization\n> p4 <- ggpl",
        " .... [TRUNCATED] \n\n> p4 <- ggplotly(p4, tooltip = \"text\")\n\u001B[38;5;232m`geom_smooth()` using formula = 'y ~ x'\u001B[39m\n\n> # 5. Interaction of Cholesterol Levels and Resting Blood Pressure on Heart Disease Visualization\n> p5 <- ggplot(modified_heart_data, aes(x = chol, y .... [TRUNCATED] \n\n> p5 <- ggplotly(p5, tooltip = \"text\")\n\u001B[38;5;232m`geom_smooth()` using formula = 'y ~ x'\u001B[39m\n\n> # Exporting the visualizations to files (if needed)\n> ggsave(\"age_distribution_by_heart_disease_status.png\", plot = last_plot(), device = \"png\")",
        "\n\u001B[38;5;232mSaving 8.53 x 5.57 in image\u001B[39m\n",
        "Error in f(...) : Graphics API version mismatch\n",
        "In addition: ",
        "Warning message:\n",
        "\u001B[38;5;232mThe following aesthetics were dropped during statistical transformation: \u001B[32mtext\u001B[38;5;232m\n\u001B[36mâ„¹\u001B[38;5;232m This can happen when ggplot fails to infer the correct grouping structure in the data.\n\u001B[36mâ„¹\u001B[38;5;232m Did you forget to specify a `group` aesthetic or to convert a numerical variable into a factor?\u001B[39m \n",
        "> ",
        "source(\"~/StudentDropOutRateAnalysis/data_visualisation.R\", echo=TRUE)",
        "\n> library(tidyverse)\n\n> library(ggplot2)\n\n> library(plotly)\n\n> # Load the analyzed data\n> age_summary <- read.csv(\"age_summary.csv\")\n\n> gender_heart_disease <- read.csv(\"gender_heart_disease.csv\")\n\n> cp_heart_disease <- read.csv(\"cp_heart_disease.csv\")\n\n> modified_heart_data <- read.csv(\"modified_heart_data.csv\")\n\n> # 1. Age and Heart Disease Visualization\n> ggplot(heart_data, aes(x = age, fill = as.factor(target))) +\n+   geom_histogram(position = \"dodge\", bins  .... [TRUNCATED] \n\n> # 2. Gender Differences in Heart Disease Visualization\n> gender_heart_disease$Gender <- factor(gender_heart_disease$sex, labels = c(\"Female\", \"Male\"",
        " .... [TRUNCATED] \n\n> # Enhanced ggplot code with the correct Gender column\n> ggplot(gender_heart_disease, aes(x = Gender, y = prevalence, fill = Gender)) +\n+   geom_bar( .... [TRUNCATED] \n\n> # 3. Chest Pain Type and Heart Disease Visualization\n> colnames(cp_heart_disease)[2] <- 'no_disease'\n\n> colnames(cp_heart_disease)[3] <- 'disease'\n\n> ggplot(cp_heart_disease, aes(x = as.factor(cp))) +\n+   geom_bar(aes(y = no_disease, fill = \"No Heart Disease\"), stat = \"identity\", position = positi .... [TRUNCATED] \n\n> # New visualizations for the exploratory questions\n> \n> # 4. Max Heart Rate Achieved vs Age Group by Heart Disease Status Visualization\n> p4 <- ggpl",
        " .... [TRUNCATED] \n\n> p4 <- ggplotly(p4, tooltip = \"text\")\n\u001B[38;5;232m`geom_smooth()` using formula = 'y ~ x'\u001B[39m\n\n> # 5. Interaction of Cholesterol Levels and Resting Blood Pressure on Heart Disease Visualization\n> p5 <- ggplot(modified_heart_data, aes(x = chol, y .... [TRUNCATED] \n\n> p5 <- ggplotly(p5, tooltip = \"text\")\n\u001B[38;5;232m`geom_smooth()` using formula = 'y ~ x'\u001B[39m\n\n> p4\n\n> p5\n\n> # Exporting the visualizations to files (if needed)\n> ggsave(\"age_distribution_by_heart_disease_status.png\", plot = last_plot(), device = \"png\")",
        "\n\u001B[38;5;232mSaving 8.53 x 5.57 in image\u001B[39m\n",
        "Error in f(...) : Graphics API version mismatch\n",
        "In addition: ",
        "Warning message:\n",
        "\u001B[38;5;232mThe following aesthetics were dropped during statistical transformation: \u001B[32mtext\u001B[38;5;232m\n\u001B[36mâ„¹\u001B[38;5;232m This can happen when ggplot fails to infer the correct grouping structure in the data.\n\u001B[36mâ„¹\u001B[38;5;232m Did you forget to specify a `group` aesthetic or to convert a numerical variable into a factor?\u001B[39m \n",
        "> ",
        "source(\"~/StudentDropOutRateAnalysis/data_visualisation.R\", echo=TRUE)",
        "\n> library(tidyverse)\n\n> library(ggplot2)\n\n> library(plotly)\n\n> # Load the analyzed data\n> age_summary <- read.csv(\"age_summary.csv\")\n\n> gender_heart_disease <- read.csv(\"gender_heart_disease.csv\")\n\n> cp_heart_disease <- read.csv(\"cp_heart_disease.csv\")\n\n> modified_heart_data <- read.csv(\"modified_heart_data.csv\")\n\n> # 1. Age and Heart Disease Visualization\n> ggplot(heart_data, aes(x = age, fill = as.factor(target))) +\n+   geom_histogram(position = \"dodge\", bins  .... [TRUNCATED] \n\n> # 2. Gender Differences in Heart Disease Visualization\n> gender_heart_disease$Gender <- factor(gender_heart_disease$sex, labels = c(\"Female\", \"Male\"",
        " .... [TRUNCATED] \n\n> # Enhanced ggplot code with the correct Gender column\n> ggplot(gender_heart_disease, aes(x = Gender, y = prevalence, fill = Gender)) +\n+   geom_bar( .... [TRUNCATED] \n\n> # 3. Chest Pain Type and Heart Disease Visualization\n> colnames(cp_heart_disease)[2] <- 'no_disease'\n\n> colnames(cp_heart_disease)[3] <- 'disease'\n\n> ggplot(cp_heart_disease, aes(x = as.factor(cp))) +\n+   geom_bar(aes(y = no_disease, fill = \"No Heart Disease\"), stat = \"identity\", position = positi .... [TRUNCATED] \n\n> # New visualizations for the exploratory questions\n> \n> \n> # 4. Max Heart Rate Achieved vs Age Group by Heart Disease Status Visualization\n> p4 <- g",
        " .... [TRUNCATED] \n\n> p4 <- ggplotly(p4, tooltip = \"text\")\n\u001B[38;5;232m`geom_smooth()` using formula = 'y ~ x'\u001B[39m\n\n> # 5. Interaction of Cholesterol Levels and Resting Blood Pressure on Heart Disease Visualization\n> p5 <- ggplot(modified_heart_data, aes(x = chol, y .... [TRUNCATED] \n\n> p5 <- ggplotly(p5, tooltip = \"text\")\n\u001B[38;5;232m`geom_smooth()` using formula = 'y ~ x'\u001B[39m\n\n> p4\n\n> p5\n\n> # Exporting the visualizations to files (if needed)\n> ggsave(\"age_distribution_by_heart_disease_status.png\", plot = last_plot(), device = \"png\")",
        "\n\u001B[38;5;232mSaving 8.53 x 5.57 in image\u001B[39m\n",
        "Error in f(...) : Graphics API version mismatch\n",
        "In addition: ",
        "Warning message:\n",
        "\u001B[38;5;232mThe following aesthetics were dropped during statistical transformation: \u001B[32mtext\u001B[38;5;232m\n\u001B[36mâ„¹\u001B[38;5;232m This can happen when ggplot fails to infer the correct grouping structure in the data.\n\u001B[36mâ„¹\u001B[38;5;232m Did you forget to specify a `group` aesthetic or to convert a numerical variable into a factor?\u001B[39m \n",
        "> ",
        "source(\"~/StudentDropOutRateAnalysis/data_visualisation.R\", echo=TRUE)",
        "\n> library(tidyverse)\n\n> library(ggplot2)\n\n> library(plotly)\n\n> # Load the analyzed data\n> age_summary <- read.csv(\"age_summary.csv\")\n\n> gender_heart_disease <- read.csv(\"gender_heart_disease.csv\")\n\n> cp_heart_disease <- read.csv(\"cp_heart_disease.csv\")\n\n> modified_heart_data <- read.csv(\"modified_heart_data.csv\")\n\n> # 1. Age and Heart Disease Visualization\n> ggplot(heart_data, aes(x = age, fill = as.factor(target))) +\n+   geom_histogram(position = \"dodge\", bins  .... [TRUNCATED] \n\n> # 2. Gender Differences in Heart Disease Visualization\n> gender_heart_disease$Gender <- factor(gender_heart_disease$sex, labels = c(\"Female\", \"Male\"",
        " .... [TRUNCATED] \n\n> # Enhanced ggplot code with the correct Gender column\n> ggplot(gender_heart_disease, aes(x = Gender, y = prevalence, fill = Gender)) +\n+   geom_bar( .... [TRUNCATED] \n\n> # 3. Chest Pain Type and Heart Disease Visualization\n> colnames(cp_heart_disease)[2] <- 'no_disease'\n\n> colnames(cp_heart_disease)[3] <- 'disease'\n\n> ggplot(cp_heart_disease, aes(x = as.factor(cp))) +\n+   geom_bar(aes(y = no_disease, fill = \"No Heart Disease\"), stat = \"identity\", position = positi .... [TRUNCATED] \n\n> # New visualizations for the exploratory questions\n> \n> \n> # 4. Max Heart Rate Achieved vs Age Group by Heart Disease Status Visualization\n> p4 <- g",
        " .... [TRUNCATED] \n\n> p4 <- ggplotly(p4, tooltip = \"text\")\n\u001B[38;5;232m`geom_smooth()` using formula = 'y ~ x'\u001B[39m\n\n> # 5. Interaction of Cholesterol Levels and Resting Blood Pressure on Heart Disease Visualization\n> # 5. Interaction of Cholesterol Levels and Restin .... [TRUNCATED] \n\n> p5 <- ggplotly(p5, tooltip = \"text\")\n\u001B[38;5;232m`geom_smooth()` using formula = 'y ~ x'\u001B[39m\n\n> p4\n\n> p5\n\n> # Exporting the visualizations to files (if needed)\n> ggsave(\"age_distribution_by_heart_disease_status.png\", plot = last_plot(), device = \"png\")",
        "\n\u001B[38;5;232mSaving 8.53 x 5.57 in image\u001B[39m\n",
        "Error in f(...) : Graphics API version mismatch\n",
        "In addition: ",
        "Warning messages:\n",
        "1: \u001B[38;5;232mThe following aesthetics were dropped during statistical transformation: \u001B[32mtext\u001B[38;5;232m\n\u001B[36mâ„¹\u001B[38;5;232m This can happen when ggplot fails to infer the correct grouping structure in the data.\n\u001B[36mâ„¹\u001B[38;5;232m Did you forget to specify a `group` aesthetic or to convert a numerical variable into a factor?\u001B[39m \n",
        "2: \u001B[38;5;232mThe following aesthetics were dropped during statistical transformation: \u001B[32mtext\u001B[38;5;232m\n\u001B[36mâ„¹\u001B[38;5;232m This can happen when ggplot fails to infer the correct grouping structure in the data.\n\u001B[36mâ„¹\u001B[38;5;232m Did you forget to specify a `group` aesthetic or to convert a numerical variable into a factor?\u001B[39m \n",
        "> ",
        "source(\"~/StudentDropOutRateAnalysis/data_visualisation.R\", echo=TRUE)",
        "\n> library(tidyverse)\n\n> library(ggplot2)\n\n> library(plotly)\n\n> # Load the analyzed data\n> age_summary <- read.csv(\"age_summary.csv\")\n\n> gender_heart_disease <- read.csv(\"gender_heart_disease.csv\")\n\n> cp_heart_disease <- read.csv(\"cp_heart_disease.csv\")\n\n> modified_heart_data <- read.csv(\"modified_heart_data.csv\")\n\n> # 1. Age and Heart Disease Visualization\n> ggplot(heart_data, aes(x = age, fill = as.factor(target))) +\n+   geom_histogram(position = \"dodge\", bins  .... [TRUNCATED] \n\n> # 2. Gender Differences in Heart Disease Visualization\n> gender_heart_disease$Gender <- factor(gender_heart_disease$sex, labels = c(\"Female\", \"Male\"",
        " .... [TRUNCATED] \n\n> # Enhanced ggplot code with the correct Gender column\n> ggplot(gender_heart_disease, aes(x = Gender, y = prevalence, fill = Gender)) +\n+   geom_bar( .... [TRUNCATED] \n\n> # 3. Chest Pain Type and Heart Disease Visualization\n> colnames(cp_heart_disease)[2] <- 'no_disease'\n\n> colnames(cp_heart_disease)[3] <- 'disease'\n\n> ggplot(cp_heart_disease, aes(x = as.factor(cp))) +\n+   geom_bar(aes(y = no_disease, fill = \"No Heart Disease\"), stat = \"identity\", position = positi .... [TRUNCATED] \n\n> # New visualizations for the exploratory questions\n> \n> \n> # 4. Max Heart Rate Achieved vs Age Group by Heart Disease Status Visualization\n> p4 <- g",
        " .... [TRUNCATED] \n\n> p4 <- ggplotly(p4, tooltip = \"text\")\n\u001B[38;5;232m`geom_smooth()` using formula = 'y ~ x'\u001B[39m\n\n> # 5. Interaction of Cholesterol Levels and Resting Blood Pressure on Heart Disease Visualization\n> # 5. Interaction of Cholesterol Levels and Restin .... [TRUNCATED] \n\n> p5 <- ggplotly(p5, tooltip = \"text\")\n\u001B[38;5;232m`geom_smooth()` using formula = 'y ~ x'\u001B[39m\n\n> p1\n\n> p2\n\n> p3\n\n> p4\n\n> p5\n\n> # Exporting the visualizations to files (if needed)\n> ggsave(\"age_distribution_by_heart_disease_status.png\", plot = last_plot(), device = \"png\")",
        "\n\u001B[38;5;232mSaving 8.53 x 5.57 in image\u001B[39m\n",
        "Error in f(...) : Graphics API version mismatch\n",
        "In addition: ",
        "Warning messages:\n",
        "1: \u001B[38;5;232mThe following aesthetics were dropped during statistical transformation: \u001B[32mtext\u001B[38;5;232m\n\u001B[36mâ„¹\u001B[38;5;232m This can happen when ggplot fails to infer the correct grouping structure in the data.\n\u001B[36mâ„¹\u001B[38;5;232m Did you forget to specify a `group` aesthetic or to convert a numerical variable into a factor?\u001B[39m \n",
        "2: \u001B[38;5;232mThe following aesthetics were dropped during statistical transformation: \u001B[32mtext\u001B[38;5;232m\n\u001B[36mâ„¹\u001B[38;5;232m This can happen when ggplot fails to infer the correct grouping structure in the data.\n\u001B[36mâ„¹\u001B[38;5;232m Did you forget to specify a `group` aesthetic or to convert a numerical variable into a factor?\u001B[39m \n",
        "> ",
        "source(\"~/StudentDropOutRateAnalysis/data_visualisation.R\", echo=TRUE)",
        "\n> library(tidyverse)\n\n> library(ggplot2)\n\n> library(plotly)\n\n> # Load the analyzed data\n> age_summary <- read.csv(\"age_summary.csv\")\n\n> gender_heart_disease <- read.csv(\"gender_heart_disease.csv\")\n\n> cp_heart_disease <- read.csv(\"cp_heart_disease.csv\")\n\n> modified_heart_data <- read.csv(\"modified_heart_data.csv\")\n\n> # Convert the 'target' variable to a factor with labels\n> heart_data$target <- factor(heart_data$target, levels = c(0, 1), labels = c(\"No Heart Dise ...\" ... [TRUNCATED] \n\n> # 1. Age and Heart Disease Visualization\n> p1 <- ggplot(heart_data, aes(x = age, fill = target)) +\n+   geom_histogram(position = \"dodge\", bins = 30,",
        " .... [TRUNCATED] \n\n> # Convert to interactive plotly object with custom tooltips\n> p1 <- ggplotly(p1, tooltip = c(\"x\", \"fill\"))\n\n> # 2. Gender Differences in Heart Disease Visualization\n> gender_heart_disease$Gender <- factor(gender_heart_disease$sex, labels = c(\"Female\", \"Male\" .... [TRUNCATED] \n\n> # Enhanced ggplot code with the correct Gender column\n> ggplot(gender_heart_disease, aes(x = Gender, y = prevalence, fill = Gender)) +\n+   geom_bar( .... [TRUNCATED] \n\n> # 3. Chest Pain Type and Heart Disease Visualization\n> colnames(cp_heart_disease)[2] <- 'no_disease'",
        "\n\n> colnames(cp_heart_disease)[3] <- 'disease'\n\n> ggplot(cp_heart_disease, aes(x = as.factor(cp))) +\n+   geom_bar(aes(y = no_disease, fill = \"No Heart Disease\"), stat = \"identity\", position = positi .... [TRUNCATED] \n\n> # New visualizations for the exploratory questions\n> \n> \n> # 4. Max Heart Rate Achieved vs Age Group by Heart Disease Status Visualization\n> p4 <- g .... [TRUNCATED] \n\n> p4 <- ggplotly(p4, tooltip = \"text\")\n\u001B[38;5;232m`geom_smooth()` using formula = 'y ~ x'\u001B[39m\n\n> # 5. Interaction of Cholesterol Levels and Resting Blood Pressure on Heart Disease Visualization\n> # 5. Interaction of Cholesterol Levels and Restin",
        " .... [TRUNCATED] \n\n> p5 <- ggplotly(p5, tooltip = \"text\")\n\u001B[38;5;232m`geom_smooth()` using formula = 'y ~ x'\u001B[39m\n\n> p1\n\n> p2\n\n> p3\n\n> p4\n\n> p5\n\n> # Exporting the visualizations to files (if needed)\n> ggsave(\"age_distribution_by_heart_disease_status.png\", plot = last_plot(), device = \"png\")\n\u001B[38;5;232mSaving 8.53 x 5.57 in image\u001B[39m\n",
        "Error in f(...) : Graphics API version mismatch\n",
        "In addition: ",
        "Warning messages:\n",
        "1: \u001B[38;5;232mThe following aesthetics were dropped during statistical transformation: \u001B[32mtext\u001B[38;5;232m\n\u001B[36mâ„¹\u001B[38;5;232m This can happen when ggplot fails to infer the correct grouping structure in the data.\n\u001B[36mâ„¹\u001B[38;5;232m Did you forget to specify a `group` aesthetic or to convert a numerical variable into a factor?\u001B[39m \n",
        "2: \u001B[38;5;232mThe following aesthetics were dropped during statistical transformation: \u001B[32mtext\u001B[38;5;232m\n\u001B[36mâ„¹\u001B[38;5;232m This can happen when ggplot fails to infer the correct grouping structure in the data.\n\u001B[36mâ„¹\u001B[38;5;232m Did you forget to specify a `group` aesthetic or to convert a numerical variable into a factor?\u001B[39m \n",
        "> ",
        "source(\"~/StudentDropOutRateAnalysis/data_visualisation.R\", echo=TRUE)",
        "\n> library(tidyverse)\n\n> library(ggplot2)\n\n> library(plotly)\n\n> # Load the analyzed data\n> age_summary <- read.csv(\"age_summary.csv\")\n\n> gender_heart_disease <- read.csv(\"gender_heart_disease.csv\")\n\n> cp_heart_disease <- read.csv(\"cp_heart_disease.csv\")\n\n> modified_heart_data <- read.csv(\"modified_heart_data.csv\")\n\n> # Assuming 'heart_data' is your dataframe\n> # Make sure that 'target' is a factor with labels for plotting\n> heart_data$target <- factor(heart_data$ .... [TRUNCATED] \n\n> # Age Distribution by Heart Disease Status\n> p1 <- ggplot(heart_data, aes(x = age, fill = target)) +\n+   geom_histogram(position = \"dodge\", bins = 3",
        " .... [TRUNCATED] \n\n> p1 <- ggplotly(p1, tooltip = c(\"x\", \"fill\"))\n\n> # 2. Gender Differences in Heart Disease Visualization\n> gender_heart_disease$Gender <- factor(gender_heart_disease$sex, labels = c(\"Female\", \"Male\" .... [TRUNCATED] \n\n> # Enhanced ggplot code with the correct Gender column\n> ggplot(gender_heart_disease, aes(x = Gender, y = prevalence, fill = Gender)) +\n+   geom_bar( .... [TRUNCATED] \n\n> # 3. Chest Pain Type and Heart Disease Visualization\n> colnames(cp_heart_disease)[2] <- 'no_disease'\n\n",
        "> colnames(cp_heart_disease)[3] <- 'disease'\n\n> ggplot(cp_heart_disease, aes(x = as.factor(cp))) +\n+   geom_bar(aes(y = no_disease, fill = \"No Heart Disease\"), stat = \"identity\", position = positi .... [TRUNCATED] \n\n> # New visualizations for the exploratory questions\n> \n> \n> # 4. Max Heart Rate Achieved vs Age Group by Heart Disease Status Visualization\n> p4 <- g .... [TRUNCATED] \n\n> p4 <- ggplotly(p4, tooltip = \"text\")\n\u001B[38;5;232m`geom_smooth()` using formula = 'y ~ x'\u001B[39m\n\n> # 5. Interaction of Cholesterol Levels and Resting Blood Pressure on Heart Disease Visualization\n> # 5. Interaction of Cholesterol Levels and Restin",
        " .... [TRUNCATED] \n\n> p5 <- ggplotly(p5, tooltip = \"text\")\n\u001B[38;5;232m`geom_smooth()` using formula = 'y ~ x'\u001B[39m\n\n> p1\n\n> p2\n\n> p3\n\n> p4\n\n> p5\n\n> # Exporting the visualizations to files (if needed)\n> ggsave(\"age_distribution_by_heart_disease_status.png\", plot = last_plot(), device = \"png\")\n\u001B[38;5;232mSaving 8.53 x 5.57 in image\u001B[39m\n",
        "Error in f(...) : Graphics API version mismatch\n",
        "In addition: ",
        "Warning messages:\n",
        "1: \u001B[38;5;232mThe following aesthetics were dropped during statistical transformation: \u001B[32mtext\u001B[38;5;232m\n\u001B[36mâ„¹\u001B[38;5;232m This can happen when ggplot fails to infer the correct grouping structure in the data.\n\u001B[36mâ„¹\u001B[38;5;232m Did you forget to specify a `group` aesthetic or to convert a numerical variable into a factor?\u001B[39m \n",
        "2: \u001B[38;5;232mThe following aesthetics were dropped during statistical transformation: \u001B[32mtext\u001B[38;5;232m\n\u001B[36mâ„¹\u001B[38;5;232m This can happen when ggplot fails to infer the correct grouping structure in the data.\n\u001B[36mâ„¹\u001B[38;5;232m Did you forget to specify a `group` aesthetic or to convert a numerical variable into a factor?\u001B[39m \n",
        "> ",
        "source(\"~/StudentDropOutRateAnalysis/data_visualisation.R\", echo=TRUE)",
        "\n> library(tidyverse)\n\n> library(ggplot2)\n\n> library(plotly)\n\n> # Load the analyzed data\n> age_summary <- read.csv(\"age_summary.csv\")\n\n> gender_heart_disease <- read.csv(\"gender_heart_disease.csv\")\n\n> cp_heart_disease <- read.csv(\"cp_heart_disease.csv\")\n\n> modified_heart_data <- read.csv(\"modified_heart_data.csv\")\n\n> # Assuming 'heart_data' is your dataframe\n> # Make sure that 'target' is a factor with labels for plotting\n> heart_data$target <- factor(heart_data$ .... [TRUNCATED] \n\n> # Age Distribution by Heart Disease Status\n> p1 <- ggplot(heart_data, aes(x = age, fill = target)) +\n+   geom_histogram(position = \"dodge\", bins = 3",
        " .... [TRUNCATED] \n\n> p1 <- ggplotly(p1, tooltip = c(\"x\", \"fill\"))\n\n> # 2. Gender Differences in Heart Disease Visualization\n> gender_heart_disease$Gender <- factor(gender_heart_disease$sex, labels = c(\"Female\", \"Male\" .... [TRUNCATED] \n\n> # Enhanced ggplot code with the correct Gender column\n> ggplot(gender_heart_disease, aes(x = Gender, y = prevalence, fill = Gender)) +\n+   geom_bar( .... [TRUNCATED] \n\n> # 3. Chest Pain Type and Heart Disease Visualization\n> colnames(cp_heart_disease)[2] <- 'no_disease'\n\n",
        "> colnames(cp_heart_disease)[3] <- 'disease'\n\n> ggplot(cp_heart_disease, aes(x = as.factor(cp))) +\n+   geom_bar(aes(y = no_disease, fill = \"No Heart Disease\"), stat = \"identity\", position = positi .... [TRUNCATED] \n\n> # New visualizations for the exploratory questions\n> \n> \n> # 4. Max Heart Rate Achieved vs Age Group by Heart Disease Status Visualization\n> p4 <- g .... [TRUNCATED] \n\n> p4 <- ggplotly(p4, tooltip = \"text\")\n\u001B[38;5;232m`geom_smooth()` using formula = 'y ~ x'\u001B[39m\n\n> # 5. Interaction of Cholesterol Levels and Resting Blood Pressure on Heart Disease Visualization\n> # 5. Interaction of Cholesterol Levels and Restin",
        " .... [TRUNCATED] \n\n> p5 <- ggplotly(p5, tooltip = \"text\")\n\u001B[38;5;232m`geom_smooth()` using formula = 'y ~ x'\u001B[39m\n\n> p1\n\n> p2\n\n> p3\n\n> p4\n\n> p5\n\n> # Exporting the visualizations to files (if needed)\n> ggsave(\"age_distribution_by_heart_disease_status.png\", plot = last_plot(), device = \"png\")\n\u001B[38;5;232mSaving 8.53 x 5.57 in image\u001B[39m\n",
        "Error in f(...) : Graphics API version mismatch\n",
        "In addition: ",
        "Warning messages:\n",
        "1: \u001B[38;5;232mThe following aesthetics were dropped during statistical transformation: \u001B[32mtext\u001B[38;5;232m\n\u001B[36mâ„¹\u001B[38;5;232m This can happen when ggplot fails to infer the correct grouping structure in the data.\n\u001B[36mâ„¹\u001B[38;5;232m Did you forget to specify a `group` aesthetic or to convert a numerical variable into a factor?\u001B[39m \n",
        "2: \u001B[38;5;232mThe following aesthetics were dropped during statistical transformation: \u001B[32mtext\u001B[38;5;232m\n\u001B[36mâ„¹\u001B[38;5;232m This can happen when ggplot fails to infer the correct grouping structure in the data.\n\u001B[36mâ„¹\u001B[38;5;232m Did you forget to specify a `group` aesthetic or to convert a numerical variable into a factor?\u001B[39m \n",
        "> ",
        "source(\"~/StudentDropOutRateAnalysis/data_visualisation.R\", echo=TRUE)",
        "\n> library(tidyverse)\n\n> library(ggplot2)\n\n> library(plotly)\n\n> # Load the analyzed data\n> age_summary <- read.csv(\"age_summary.csv\")\n\n> gender_heart_disease <- read.csv(\"gender_heart_disease.csv\")\n\n> cp_heart_disease <- read.csv(\"cp_heart_disease.csv\")\n\n> modified_heart_data <- read.csv(\"modified_heart_data.csv\")\n\n> # Assuming 'heart_data' is your dataframe\n> # Make sure that 'target' is a factor with labels for plotting\n> heart_data$target <- factor(heart_data$ .... [TRUNCATED] \n\n> # Age Distribution by Heart Disease Status\n> p1 <- ggplot(heart_data, aes(x = age, fill = target)) +\n+   geom_histogram(position = \"dodge\", bins = 3",
        " .... [TRUNCATED] \n\n> p1 <- ggplotly(p1, tooltip = c(\"x\", \"fill\"))\n\n> # 2. Gender Differences in Heart Disease Visualization\n> gender_heart_disease$Gender <- factor(gender_heart_disease$sex, labels = c(\"Female\", \"Male\" .... [TRUNCATED] \n\n> # Enhanced ggplot code with the correct Gender column\n> ggplot(gender_heart_disease, aes(x = Gender, y = prevalence, fill = Gender)) +\n+   geom_bar( .... [TRUNCATED] \n\n> # 3. Chest Pain Type and Heart Disease Visualization\n> colnames(cp_heart_disease)[2] <- 'no_disease'\n\n",
        "> colnames(cp_heart_disease)[3] <- 'disease'\n\n> ggplot(cp_heart_disease, aes(x = as.factor(cp))) +\n+   geom_bar(aes(y = no_disease, fill = \"No Heart Disease\"), stat = \"identity\", position = positi .... [TRUNCATED] \n\n> # New visualizations for the exploratory questions\n> \n> \n> # 4. Max Heart Rate Achieved vs Age Group by Heart Disease Status Visualization\n> p4 <- g .... [TRUNCATED] \n\n> p4 <- ggplotly(p4, tooltip = \"text\")\n\u001B[38;5;232m`geom_smooth()` using formula = 'y ~ x'\u001B[39m\n\n> # 5. Interaction of Cholesterol Levels and Resting Blood Pressure on Heart Disease Visualization\n> # 5. Interaction of Cholesterol Levels and Restin",
        " .... [TRUNCATED] \n\n> p5 <- ggplotly(p5, tooltip = \"text\")\n\u001B[38;5;232m`geom_smooth()` using formula = 'y ~ x'\u001B[39m\n\n> p1\n\n> p2\n\n> p3\n\n> p4\n\n> p5\n\n> # Exporting the visualizations to files (if needed)\n> ggsave(\"age_distribution_by_heart_disease_status.png\", plot = last_plot(), device = \"png\")\n\u001B[38;5;232mSaving 8.53 x 5.57 in image\u001B[39m\n",
        "Error in f(...) : Graphics API version mismatch\n",
        "In addition: ",
        "Warning messages:\n",
        "1: \u001B[38;5;232mThe following aesthetics were dropped during statistical transformation: \u001B[32mtext\u001B[38;5;232m\n\u001B[36mâ„¹\u001B[38;5;232m This can happen when ggplot fails to infer the correct grouping structure in the data.\n\u001B[36mâ„¹\u001B[38;5;232m Did you forget to specify a `group` aesthetic or to convert a numerical variable into a factor?\u001B[39m \n",
        "2: \u001B[38;5;232mThe following aesthetics were dropped during statistical transformation: \u001B[32mtext\u001B[38;5;232m\n\u001B[36mâ„¹\u001B[38;5;232m This can happen when ggplot fails to infer the correct grouping structure in the data.\n\u001B[36mâ„¹\u001B[38;5;232m Did you forget to specify a `group` aesthetic or to convert a numerical variable into a factor?\u001B[39m \n",
        "> ",
        "source(\"~/StudentDropOutRateAnalysis/data_visualisation.R\", echo=TRUE)",
        "\n> library(tidyverse)\n\n> library(ggplot2)\n\n> library(plotly)\n\n> # Load the analyzed data\n> age_summary <- read.csv(\"age_summary.csv\")\n\n> gender_heart_disease <- read.csv(\"gender_heart_disease.csv\")\n\n> cp_heart_disease <- read.csv(\"cp_heart_disease.csv\")\n\n> modified_heart_data <- read.csv(\"modified_heart_data.csv\")\n\n> # Convert the 'target' variable to a factor with labels\n> heart_data$target <- factor(heart_data$target, levels = c(0, 1), labels = c(\"No Heart Dise ...\" ... [TRUNCATED] \n\n> # 1. Age and Heart Disease Visualization\n> p1 <- ggplot(heart_data, aes(x = age, fill = target)) +\n+   geom_histogram(position = \"dodge\", bins = 30,",
        " .... [TRUNCATED] \n\n> # Convert to interactive plotly object with custom tooltips\n> p1 <- ggplotly(p1, tooltip = c(\"x\", \"fill\"))\n\n> # 2. Gender Differences in Heart Disease Visualization\n> gender_heart_disease$Gender <- factor(gender_heart_disease$sex, labels = c(\"Female\", \"Male\" .... [TRUNCATED] \n\n> # Enhanced ggplot code with the correct Gender column\n> ggplot(gender_heart_disease, aes(x = Gender, y = prevalence, fill = Gender)) +\n+   geom_bar( .... [TRUNCATED] \n\n> # 3. Chest Pain Type and Heart Disease Visualization\n> colnames(cp_heart_disease)[2] <- 'no_disease'",
        "\n\n> colnames(cp_heart_disease)[3] <- 'disease'\n\n> ggplot(cp_heart_disease, aes(x = as.factor(cp))) +\n+   geom_bar(aes(y = no_disease, fill = \"No Heart Disease\"), stat = \"identity\", position = positi .... [TRUNCATED] \n\n> # New visualizations for the exploratory questions\n> \n> \n> # 4. Max Heart Rate Achieved vs Age Group by Heart Disease Status Visualization\n> p4 <- g .... [TRUNCATED] \n\n> p4 <- ggplotly(p4, tooltip = \"text\")\n\u001B[38;5;232m`geom_smooth()` using formula = 'y ~ x'\u001B[39m\n\n> # 5. Interaction of Cholesterol Levels and Resting Blood Pressure on Heart Disease Visualization\n> # 5. Interaction of Cholesterol Levels and Restin",
        " .... [TRUNCATED] \n\n> p5 <- ggplotly(p5, tooltip = \"text\")\n\u001B[38;5;232m`geom_smooth()` using formula = 'y ~ x'\u001B[39m\n\n> p1\n\n> p2\n\n> p3\n\n> p4\n\n> p5\n\n> # Exporting the visualizations to files (if needed)\n> ggsave(\"age_distribution_by_heart_disease_status.png\", plot = last_plot(), device = \"png\")\n\u001B[38;5;232mSaving 8.53 x 5.57 in image\u001B[39m\n",
        "Error in f(...) : Graphics API version mismatch\n",
        "In addition: ",
        "Warning messages:\n",
        "1: \u001B[38;5;232mThe following aesthetics were dropped during statistical transformation: \u001B[32mtext\u001B[38;5;232m\n\u001B[36mâ„¹\u001B[38;5;232m This can happen when ggplot fails to infer the correct grouping structure in the data.\n\u001B[36mâ„¹\u001B[38;5;232m Did you forget to specify a `group` aesthetic or to convert a numerical variable into a factor?\u001B[39m \n",
        "2: \u001B[38;5;232mThe following aesthetics were dropped during statistical transformation: \u001B[32mtext\u001B[38;5;232m\n\u001B[36mâ„¹\u001B[38;5;232m This can happen when ggplot fails to infer the correct grouping structure in the data.\n\u001B[36mâ„¹\u001B[38;5;232m Did you forget to specify a `group` aesthetic or to convert a numerical variable into a factor?\u001B[39m \n",
        "> ",
        "source(\"~/StudentDropOutRateAnalysis/data_visualisation.R\", echo=TRUE)",
        "\n> library(tidyverse)\n\n> library(ggplot2)\n\n> library(plotly)\n\n> # Load the analyzed data\n> age_summary <- read.csv(\"age_summary.csv\")\n\n> gender_heart_disease <- read.csv(\"gender_heart_disease.csv\")\n\n> cp_heart_disease <- read.csv(\"cp_heart_disease.csv\")\n\n> modified_heart_data <- read.csv(\"modified_heart_data.csv\")\n\n> # Assuming 'heart_data' is your dataframe\n> # Make sure that 'target' is a factor with labels for plotting\n> heart_data$target <- factor(heart_data$ .... [TRUNCATED] \n\n> # Age Distribution by Heart Disease Status\n> p1 <- ggplot(heart_data, aes(x = age, fill = target)) +\n+   geom_histogram(position = \"dodge\", bins = 3",
        " .... [TRUNCATED] \n\n> p1 <- ggplotly(p1, tooltip = c(\"x\", \"fill\"))\n\n> # 2. Gender Differences in Heart Disease Visualization\n> gender_heart_disease$Gender <- factor(gender_heart_disease$sex, labels = c(\"Female\", \"Male\" .... [TRUNCATED] \n\n> # Enhanced ggplot code with the correct Gender column\n> ggplot(gender_heart_disease, aes(x = Gender, y = prevalence, fill = Gender)) +\n+   geom_bar( .... [TRUNCATED] \n\n> # 3. Chest Pain Type and Heart Disease Visualization\n> colnames(cp_heart_disease)[2] <- 'no_disease'\n\n",
        "> colnames(cp_heart_disease)[3] <- 'disease'\n\n> ggplot(cp_heart_disease, aes(x = as.factor(cp))) +\n+   geom_bar(aes(y = no_disease, fill = \"No Heart Disease\"), stat = \"identity\", position = positi .... [TRUNCATED] \n\n> # New visualizations for the exploratory questions\n> \n> \n> # 4. Max Heart Rate Achieved vs Age Group by Heart Disease Status Visualization\n> p4 <- g .... [TRUNCATED] \n\n> p4 <- ggplotly(p4, tooltip = \"text\")\n\u001B[38;5;232m`geom_smooth()` using formula = 'y ~ x'\u001B[39m\n\n> # 5. Interaction of Cholesterol Levels and Resting Blood Pressure on Heart Disease Visualization\n> # 5. Interaction of Cholesterol Levels and Restin",
        " .... [TRUNCATED] \n\n> p5 <- ggplotly(p5, tooltip = \"text\")\n\u001B[38;5;232m`geom_smooth()` using formula = 'y ~ x'\u001B[39m\n\n> p1\n\n> p2\n\n> p3\n\n> p4\n\n> p5\n\n> # Exporting the visualizations to files (if needed)\n> ggsave(\"age_distribution_by_heart_disease_status.png\", plot = last_plot(), device = \"png\")\n\u001B[38;5;232mSaving 8.53 x 5.57 in image\u001B[39m\n",
        "Error in f(...) : Graphics API version mismatch\n",
        "In addition: ",
        "Warning messages:\n",
        "1: \u001B[38;5;232mThe following aesthetics were dropped during statistical transformation: \u001B[32mtext\u001B[38;5;232m\n\u001B[36mâ„¹\u001B[38;5;232m This can happen when ggplot fails to infer the correct grouping structure in the data.\n\u001B[36mâ„¹\u001B[38;5;232m Did you forget to specify a `group` aesthetic or to convert a numerical variable into a factor?\u001B[39m \n",
        "2: \u001B[38;5;232mThe following aesthetics were dropped during statistical transformation: \u001B[32mtext\u001B[38;5;232m\n\u001B[36mâ„¹\u001B[38;5;232m This can happen when ggplot fails to infer the correct grouping structure in the data.\n\u001B[36mâ„¹\u001B[38;5;232m Did you forget to specify a `group` aesthetic or to convert a numerical variable into a factor?\u001B[39m \n",
        "> ",
        "source(\"~/StudentDropOutRateAnalysis/data_visualisation.R\", echo=TRUE)",
        "\n> library(tidyverse)\n\n> library(ggplot2)\n\n> library(plotly)\n\n> # Load the analyzed data\n> age_summary <- read.csv(\"age_summary.csv\")\n\n> gender_heart_disease <- read.csv(\"gender_heart_disease.csv\")\n\n> cp_heart_disease <- read.csv(\"cp_heart_disease.csv\")\n\n> modified_heart_data <- read.csv(\"modified_heart_data.csv\")\n\n> # 1. Age and Heart Disease Visualization\n> p1 <- ggplot(heart_data, aes(x = age, fill = as.factor(target), text = paste(\"Age:\", age, \"<br>Heart Dise ...\" ... [TRUNCATED] \n\n> p1 <- ggplotly(p1, tooltip = \"text\")",
        "\n\n> # 2. Gender Differences in Heart Disease Visualization\n> gender_heart_disease$Gender <- factor(gender_heart_disease$sex, labels = c(\"Female\", \"Male\" .... [TRUNCATED] \n\n> # Enhanced ggplot code with the correct Gender column\n> ggplot(gender_heart_disease, aes(x = Gender, y = prevalence, fill = Gender)) +\n+   geom_bar( .... [TRUNCATED] \n\n> # 3. Chest Pain Type and Heart Disease Visualization\n> colnames(cp_heart_disease)[2] <- 'no_disease'\n\n> colnames(cp_heart_disease)[3] <- 'disease'\n\n> ggplot(cp_heart_disease, aes(x = as.factor(cp))) +\n+   geom_bar(aes(y = no_disease, fill = \"No Heart Disease\"), stat = \"identity\", position = positi",
        " .... [TRUNCATED] \n\n> # New visualizations for the exploratory questions\n> \n> \n> # 4. Max Heart Rate Achieved vs Age Group by Heart Disease Status Visualization\n> p4 <- g .... [TRUNCATED] \n\n> p4 <- ggplotly(p4, tooltip = \"text\")\n\u001B[38;5;232m`geom_smooth()` using formula = 'y ~ x'\u001B[39m\n\n> # 5. Interaction of Cholesterol Levels and Resting Blood Pressure on Heart Disease Visualization\n> # 5. Interaction of Cholesterol Levels and Restin .... [TRUNCATED] \n\n> p5 <- ggplotly(p5, tooltip = \"text\")\n\u001B[38;5;232m`geom_smooth()` using formula = 'y ~ x'\u001B[39m\n",
        "\n> p1\n\n> p2\n\n> p3\n\n> p4\n\n> p5\n\n> # Exporting the visualizations to files (if needed)\n> ggsave(\"age_distribution_by_heart_disease_status.png\", plot = last_plot(), device = \"png\")\n\u001B[38;5;232mSaving 8.53 x 5.57 in image\u001B[39m\n",
        "Error in f(...) : Graphics API version mismatch\n",
        "In addition: ",
        "Warning messages:\n",
        "1: \u001B[38;5;232mThe following aesthetics were dropped during statistical transformation: \u001B[32mtext\u001B[38;5;232m\n\u001B[36mâ„¹\u001B[38;5;232m This can happen when ggplot fails to infer the correct grouping structure in the data.\n\u001B[36mâ„¹\u001B[38;5;232m Did you forget to specify a `group` aesthetic or to convert a numerical variable into a factor?\u001B[39m \n",
        "2: \u001B[38;5;232mThe following aesthetics were dropped during statistical transformation: \u001B[32mtext\u001B[38;5;232m\n\u001B[36mâ„¹\u001B[38;5;232m This can happen when ggplot fails to infer the correct grouping structure in the data.\n\u001B[36mâ„¹\u001B[38;5;232m Did you forget to specify a `group` aesthetic or to convert a numerical variable into a factor?\u001B[39m \n",
        "\nRestarting R session...\n\n"
    ]
}